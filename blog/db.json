{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/LICENSE","path":"LICENSE","modified":1,"renderable":0},{"_id":"source/img/avatar/mona_lisa.ico","path":"img/avatar/mona_lisa.ico","modified":1,"renderable":0},{"_id":"source/img/avatar/mona_lisa.jpg","path":"img/avatar/mona_lisa.jpg","modified":1,"renderable":0},{"_id":"source/img/icon/lecture.png","path":"img/icon/lecture.png","modified":1,"renderable":0},{"_id":"source/img/signature/ay-white.png","path":"img/signature/ay-white.png","modified":1,"renderable":0},{"_id":"source/img/signature/ay-white-2.png","path":"img/signature/ay-white-2.png","modified":1,"renderable":0},{"_id":"themes/livemylife/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.min.css","path":"css/beantech.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/catalog.styl","path":"css/catalog.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/beantech.css","path":"css/beantech.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/highlight_normal.css","path":"css/highlight_normal.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/livemylife.css","path":"css/livemylife.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/scroll.css","path":"css/scroll.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/themecolor.css","path":"css/themecolor.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/top.css","path":"css/top.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/viewer.min.css","path":"css/viewer.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/wave.css","path":"css/wave.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/catalog.js","path":"js/catalog.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/themecolor.js","path":"js/themecolor.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/ziploader.js","path":"js/ziploader.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up.png","path":"css/images/beside_up.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up2.png","path":"css/images/beside_up2.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","path":"css/images/beside_up_white.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","path":"css/images/beside_up_white2.png","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","path":"js/viewer/pic-viewer.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","path":"js/viewer/viewer.min.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"themes/livemylife/source/js/comment/gitalk.js","path":"js/comment/gitalk.js","modified":1,"renderable":1},{"_id":"source/img/header_img/la.jpg","path":"img/header_img/la.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/coast.jpg","path":"img/header_img/coast.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/big_bear_lake.jpg","path":"img/header_img/big_bear_lake.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/404_bg.jpg","path":"img/header_img/404_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/sumset.jpg","path":"img/header_img/sumset.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/snow.jpg","path":"img/header_img/snow.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"04daf093e5db316f9b204b62412d646727318f7c","modified":1610607212617},{"_id":"source/CNAME","hash":"7b594a7c935c9222219cc5308d747e7e21c1b667","modified":1610649668934},{"_id":"source/_readme.txt","hash":"bddab7042d69720ee508338cfcde9d2b1ae901bf","modified":1610590760877},{"_id":"themes/livemylife/_config.yml","hash":"cc81f0292e6d73b86b6722dafaf507cbb331d5d8","modified":1610590761334},{"_id":"source/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1610590760850},{"_id":"themes/livemylife/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1610590761334},{"_id":"source/_posts/AIA-ch1-Q-A.md","hash":"18858d198da4ec7463423e3d00f203a843019304","modified":1611551331075},{"_id":"source/_posts/AIA-ch2-Q-A.md","hash":"4dbd2f5de132b02a5e55040e61f222d8204b4d91","modified":1611516305313},{"_id":"source/about/index.md","hash":"fa7adb7e4270cd5b833a7a2fa4e8ec86fa48a430","modified":1611468419780},{"_id":"source/categories/index.md","hash":"3daa8785056aa8c972ee0b6bd8630da9a9fad14f","modified":1611468449950},{"_id":"themes/livemylife/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1610590761334},{"_id":"themes/livemylife/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1610590761335},{"_id":"themes/livemylife/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1610590761335},{"_id":"themes/livemylife/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1610590761335},{"_id":"themes/livemylife/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1610590761335},{"_id":"themes/livemylife/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1610590761336},{"_id":"themes/livemylife/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1610590761336},{"_id":"themes/livemylife/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1610590761336},{"_id":"themes/livemylife/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1610590761336},{"_id":"themes/livemylife/layout/404.ejs","hash":"6de31b4597c96c883b496a145441b903dc5b79f8","modified":1610649773275},{"_id":"themes/livemylife/layout/about.ejs","hash":"27b5aa49173e8b6430b987f7238eed5ac3ae7a91","modified":1610590761342},{"_id":"themes/livemylife/layout/archive.ejs","hash":"c783482f96be209dbfb78edb10f8ed721411e1b9","modified":1610590761342},{"_id":"themes/livemylife/layout/categories.ejs","hash":"531e24e43acb79cfab313e4dc284fab98714e335","modified":1610590761342},{"_id":"themes/livemylife/layout/index.ejs","hash":"32507af954bacbaa6257bb4a5b9fdd6f995d212f","modified":1611441443115},{"_id":"themes/livemylife/layout/keynote.ejs","hash":"2c92a060d8bbd256cc7367aec7e29e515bd00869","modified":1610590761343},{"_id":"themes/livemylife/layout/layout.ejs","hash":"ce3295ac27847954a2512064feeb8e9e9550665a","modified":1610590761343},{"_id":"themes/livemylife/layout/page.ejs","hash":"73ebc2a229add288e6b45b367f345c6eb558025d","modified":1610590761344},{"_id":"themes/livemylife/layout/post.ejs","hash":"7ec706f0b24ee02abafb77c4326568064f6aca10","modified":1610590761344},{"_id":"themes/livemylife/layout/tags.ejs","hash":"ad71cc7761bdb63dcc03c648960f6485dcc323c3","modified":1610590761344},{"_id":"source/_posts/AIA-ch1-Q-A/ans_5.png","hash":"aba9f9b28d63f7d2009c56bb102819537281d0da","modified":1611551142616},{"_id":"source/_posts/AIA-ch1-Q-A/fn_gn.png","hash":"f6b1ae0be19723be39d055b4ffdc65a3de516807","modified":1611340418617},{"_id":"source/_posts/AIA-ch1-Q-A/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611466086761},{"_id":"source/_posts/AIA-ch2-Q-A/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611466086761},{"_id":"source/img/avatar/mona_lisa.ico","hash":"e50aff0c7c92a9e14c125c2d0113734122464631","modified":1610653303559},{"_id":"source/img/avatar/mona_lisa.jpg","hash":"5e72c3d1e1c574600547887228de5661ac41f370","modified":1551247083384},{"_id":"source/img/icon/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611466086761},{"_id":"source/img/signature/ay-white.png","hash":"5bd0f949ba4c89eb08bf505aa614e406ac0026bb","modified":1610655948459},{"_id":"source/img/signature/ay-white-2.png","hash":"c5761fb500a13a2554894d23583d41608176acf9","modified":1610655921819},{"_id":"themes/livemylife/layout/_partial/anchorjs.ejs","hash":"073df9003dc40e09af1c27438860c22d0bc8fe60","modified":1610590761337},{"_id":"themes/livemylife/layout/_partial/catalog.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1610590761337},{"_id":"themes/livemylife/layout/_partial/footer.ejs","hash":"692876a456ea40e9d10265fc3d009e2beb3dd192","modified":1610654173409},{"_id":"themes/livemylife/layout/_partial/comment.ejs","hash":"5238690d6020c059f3326e6787a7a7f388cda5d8","modified":1610590761338},{"_id":"themes/livemylife/layout/_partial/gitter.ejs","hash":"34c97132f17f3c31aabe6dfbc908f0650213e847","modified":1610590761338},{"_id":"themes/livemylife/layout/_partial/head.ejs","hash":"e66ff129dd8842a71e025a4cace3127b4fb1c97a","modified":1610590761338},{"_id":"themes/livemylife/layout/_partial/header.ejs","hash":"db0234b44beea5fa61bc3e9663b0c56b3801e733","modified":1610658256013},{"_id":"themes/livemylife/layout/_partial/nav.ejs","hash":"0f0535dbdd917dbbe47a74b2a396a59fd202cba6","modified":1611442621431},{"_id":"themes/livemylife/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1610590761339},{"_id":"themes/livemylife/layout/_partial/search.ejs","hash":"edd2552c9226b8e0d31c134c87815444c5be1e1d","modified":1610657848959},{"_id":"themes/livemylife/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1610590761340},{"_id":"themes/livemylife/layout/_partial/socialshare.ejs","hash":"c85d91b7985492a909907d7517292b79d1dec668","modified":1611443249599},{"_id":"themes/livemylife/layout/_partial/themecolor.ejs","hash":"fd4c8f2b3f2955bb867105991d45134798915526","modified":1610590761340},{"_id":"themes/livemylife/layout/_widget/archive.ejs","hash":"dc31e6cfde1b789d8550d7bfcac5d0eeae3ac6ab","modified":1610590761340},{"_id":"themes/livemylife/layout/_widget/category.ejs","hash":"1dc1187e7a04ee4be85bf302ea2618c1dbf6a570","modified":1610590761341},{"_id":"themes/livemylife/layout/_widget/friends-blog.ejs","hash":"069c8f53ae6710f4891af4cc3ed481e172357f80","modified":1610590761341},{"_id":"themes/livemylife/layout/_widget/featured-tags.ejs","hash":"a313e546c29243cfd59aa2dde0b4f99287613d31","modified":1610590761341},{"_id":"themes/livemylife/layout/_widget/recent-posts.ejs","hash":"34d9adc0926099cbd83c3da5c69e43740e56583b","modified":1610590761341},{"_id":"themes/livemylife/layout/_widget/short-about.ejs","hash":"7d667e0bdfa79b1efb908c03b9ee175781345bc1","modified":1610654368882},{"_id":"themes/livemylife/layout/_widget/visitor.ejs","hash":"1127ebcadc26a8b0db25c63110fd6d1123e6dd83","modified":1610590761342},{"_id":"themes/livemylife/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1610590761345},{"_id":"themes/livemylife/source/css/beantech.min.css","hash":"fc88e09ad39e47b4302e57416d391f9dbe49f0ab","modified":1610590761346},{"_id":"themes/livemylife/source/css/catalog.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1610590761349},{"_id":"themes/livemylife/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1610590761350},{"_id":"themes/livemylife/source/css/beantech.css","hash":"bce245c3c8de02a7fda56d2c3dfc4ac529fcfbba","modified":1610590761346},{"_id":"themes/livemylife/source/css/gitalk.css","hash":"646a634ac252896d9e9f4d322d782e69c66d65ae","modified":1610590761350},{"_id":"themes/livemylife/source/css/highlight_normal.css","hash":"9885d5fb98646ca325ac790cfba6dc8a7be75fae","modified":1610590761350},{"_id":"themes/livemylife/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1610590761351},{"_id":"themes/livemylife/source/css/livemylife.css","hash":"08e549c0aad0ff94a9fae8eb91900b03bd428eee","modified":1610590761352},{"_id":"themes/livemylife/source/css/rocket.styl","hash":"5e3b4336496e01488bbb8f0bc444b9b24560482b","modified":1610590761353},{"_id":"themes/livemylife/source/css/scroll.css","hash":"ef16ea9eeb589e9334a0f071afb5f0cdaa34d69c","modified":1610590761353},{"_id":"themes/livemylife/source/css/search.css","hash":"fea98c6afa4f0be1deedb7cb13a9cd6b3ab6e42c","modified":1610590761353},{"_id":"themes/livemylife/source/css/signature.styl","hash":"ca77c660bac04862f8c72f8e02fa9bdd86401c01","modified":1610657532714},{"_id":"themes/livemylife/source/css/themecolor.css","hash":"57d910ec1707fd492cfcea7ebbb496cebe2078eb","modified":1611466014851},{"_id":"themes/livemylife/source/css/top.css","hash":"7fe7d9d4434fe2bb7178e0f43977b3869b5c0fdf","modified":1610590761354},{"_id":"themes/livemylife/source/css/viewer.min.css","hash":"bb52e4168e5b740d04bcabe3833f42e98f8037da","modified":1610590761354},{"_id":"themes/livemylife/source/css/wave.css","hash":"fb939f76dc9a48d3a7e7384f64943dac710ad452","modified":1610590761354},{"_id":"themes/livemylife/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1610590761355},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1610590761355},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1610590761357},{"_id":"themes/livemylife/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1610590761359},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1610590761357},{"_id":"themes/livemylife/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1610590761359},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1610590761357},{"_id":"themes/livemylife/source/js/catalog.js","hash":"4e34f47053ece8c1a4ab4a8441760a3d33ea9fb8","modified":1610590761359},{"_id":"themes/livemylife/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1610590761365},{"_id":"themes/livemylife/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1610590761365},{"_id":"themes/livemylife/source/js/scroll.js","hash":"182250b3bee27de24099863f0973bb7971405464","modified":1610590761371},{"_id":"themes/livemylife/source/js/themecolor.js","hash":"af8f6d9b97f6511d55ce2266987a3540770f1f54","modified":1610590761371},{"_id":"themes/livemylife/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1610590761371},{"_id":"themes/livemylife/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1610590761371},{"_id":"themes/livemylife/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1610590761371},{"_id":"themes/livemylife/source/js/ziploader.js","hash":"f61a11e60be24cf0c64019ca4dc4dc49c325ed71","modified":1610590761373},{"_id":"themes/livemylife/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1610590761349},{"_id":"themes/livemylife/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1610590761356},{"_id":"themes/livemylife/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1610590761358},{"_id":"themes/livemylife/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1610590761370},{"_id":"source/_posts/AIA-ch1-Q-A/cruves.png","hash":"5d7d95fe2928fe72d1189470fb4aff1388a4a028","modified":1611339305966},{"_id":"source/_posts/AIA-ch1-Q-A/ans_7.png","hash":"f46094ccc0fa1dc18fa6a1202626871122758cbb","modified":1611551113536},{"_id":"themes/livemylife/source/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1610590761351},{"_id":"themes/livemylife/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1610590761348},{"_id":"themes/livemylife/source/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1610590761351},{"_id":"themes/livemylife/source/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1610590761352},{"_id":"themes/livemylife/source/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1610590761352},{"_id":"themes/livemylife/source/js/viewer/pic-viewer.js","hash":"3955cbca226b562f8dec96dc459ce22363affdde","modified":1610590761372},{"_id":"themes/livemylife/source/js/viewer/viewer.min.js","hash":"b09fff2aa41305e8975b9ef80514eb937ffa6866","modified":1610590761372},{"_id":"source/_posts/AIA-ch1-Q-A/ans_6.png","hash":"ae4b46c7a29be817c3a714ed9e82e96e6ba4cf2b","modified":1611551016903},{"_id":"themes/livemylife/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1610590761369},{"_id":"themes/livemylife/source/js/comment/gitalk.js","hash":"9e326313656b821751f486e31be8418e1578668a","modified":1610590761364},{"_id":"source/img/header_img/la.jpg","hash":"a43e322e76cac84e3b92995503ae08c8641b9611","modified":1611468716773},{"_id":"source/img/header_img/coast.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1610590761241},{"_id":"source/img/header_img/big_bear_lake.jpg","hash":"f009c33343e5a6dc8835a184fbc9e37a19d8ee7c","modified":1611468650865},{"_id":"source/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1610590760926},{"_id":"source/img/header_img/sumset.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1610590761203},{"_id":"source/img/header_img/snow.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1610590761324},{"_id":"public/sitemap.xml","hash":"10c7d3a1b1766d0778bec07e3fb4cc3631634992","modified":1611551371407},{"_id":"public/baidusitemap.xml","hash":"f919dcfee0376e0e05a7e0271019809e04237516","modified":1611551371407},{"_id":"public/searchVersion.json","hash":"eb4b15f10e7e19dccd8c5620c695dd5f8bf9af7f","modified":1611551371407},{"_id":"public/404.html","hash":"b03f07bf1edce0347b916695c9df37ed86941608","modified":1611551371407},{"_id":"public/categories/index.html","hash":"a20aaabf341906abdf0b02485c9655c4e6218e70","modified":1611551371407},{"_id":"public/2021/01/24/AIA-ch2-Q-A/index.html","hash":"ebf50abcd8794320b9d6415e884451d169380ebe","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/index.html","hash":"f4c5837995a5a548d377ac59097e1a131ecdbf7c","modified":1611551371407},{"_id":"public/about/index.html","hash":"fae897c08e22ce0c062d66653d2bd4326bc9393f","modified":1611551371407},{"_id":"public/archives/index.html","hash":"9891df57373f60279b903f73157c7833d2091771","modified":1611551371407},{"_id":"public/index.html","hash":"68768dbb3be8c7f9e96c41d454a52f7aea9ca4e4","modified":1611551371407},{"_id":"public/archives/2021/index.html","hash":"6431e0622ef04c6861fee711a52508f41b03551d","modified":1611551371407},{"_id":"public/archives/2021/01/index.html","hash":"0d68d85c2598c1b0f81441e014cd4f83193b680d","modified":1611551371407},{"_id":"public/categories/CSCI-570/index.html","hash":"87009d5b191d34536bb657f9e3343951c3ef01e9","modified":1611551371407},{"_id":"public/tags/Review/index.html","hash":"cf86e15e087e7b05b4ce0ef1a08b1daa367fbbc7","modified":1611551371407},{"_id":"public/tags/Graph/index.html","hash":"bd1240dd55cb7743ae2aff4c9d636a4755694bb0","modified":1611551371407},{"_id":"public/tags/Q-A/index.html","hash":"361bada7ae347b972a0a18727bd0a3dec196d79a","modified":1611551371407},{"_id":"public/tags/Amortized-Analysis/index.html","hash":"046840de7c11bf64f4428498a72996e070691e36","modified":1611551371407},{"_id":"public/CNAME","hash":"7b594a7c935c9222219cc5308d747e7e21c1b667","modified":1611551371407},{"_id":"public/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1611551371407},{"_id":"public/img/avatar/mona_lisa.ico","hash":"e50aff0c7c92a9e14c125c2d0113734122464631","modified":1611551371407},{"_id":"public/img/icon/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611551371407},{"_id":"public/img/avatar/mona_lisa.jpg","hash":"5e72c3d1e1c574600547887228de5661ac41f370","modified":1611551371407},{"_id":"public/img/signature/ay-white.png","hash":"5bd0f949ba4c89eb08bf505aa614e406ac0026bb","modified":1611551371407},{"_id":"public/img/signature/ay-white-2.png","hash":"c5761fb500a13a2554894d23583d41608176acf9","modified":1611551371407},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1611551371407},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1611551371407},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1611551371407},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1611551371407},{"_id":"public/css/images/beside_up.png","hash":"183d87f1a99e93fc663ec798fa8c94cb87c83bcb","modified":1611551371407},{"_id":"public/css/images/beside_up2.png","hash":"ef066ba2e93a4738df45ae05020726e066c4dd1f","modified":1611551371407},{"_id":"public/css/images/beside_up_white.png","hash":"49c5922a8de63dcf9468fbcffc70d2ec36b1b527","modified":1611551371407},{"_id":"public/css/images/beside_up_white2.png","hash":"52e9d5715def1d3d09ab076d5eb3d22916d8f7d7","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/ans_5.png","hash":"aba9f9b28d63f7d2009c56bb102819537281d0da","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/fn_gn.png","hash":"f6b1ae0be19723be39d055b4ffdc65a3de516807","modified":1611551371407},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1611551371407},{"_id":"public/2021/01/24/AIA-ch2-Q-A/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/lecture.png","hash":"2df60358a9b17e702e4fc0728e38a067cd327a0f","modified":1611551371407},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1611551371407},{"_id":"public/css/catalog.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1611551371407},{"_id":"public/css/highlight_normal.css","hash":"6a40a9a0f268fb17d9002cb49a16946444ef5f34","modified":1611551371407},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1611551371407},{"_id":"public/css/rocket.css","hash":"ec8abdba1cdd362d03fd8ffe182213aa4cbd449c","modified":1611551371407},{"_id":"public/css/scroll.css","hash":"ba16b97532dd6aaec66a82f3c33cc989d361fa7a","modified":1611551371407},{"_id":"public/css/livemylife.css","hash":"dbf2b89627f55e7f8ef12730e822319859f25767","modified":1611551371407},{"_id":"public/css/search.css","hash":"a941f2f3d05d43e0a1517ae6923e848638b9ff7c","modified":1611551371407},{"_id":"public/css/signature.css","hash":"47d91f966a30d393aee44cec9bdba0a26e53dd35","modified":1611551371407},{"_id":"public/css/top.css","hash":"0303375fbe2ca942cd3d86f31d12fef9bf5785af","modified":1611551371407},{"_id":"public/css/viewer.min.css","hash":"0e045aa3df1be7d138caa701ec3aa623ccc7a52d","modified":1611551371407},{"_id":"public/css/wave.css","hash":"041f3b4a78e2840ba17679cea05fb14bb646722f","modified":1611551371407},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1611551371407},{"_id":"public/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1611551371407},{"_id":"public/js/catalog.js","hash":"059f3f31492e5b1a9dddf422a48c32969d247415","modified":1611551371407},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1611551371407},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1611551371407},{"_id":"public/js/scroll.js","hash":"265a4c4fc33b5b44b620db64ff31d2bc05d233e9","modified":1611551371407},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1611551371407},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1611551371407},{"_id":"public/js/themecolor.js","hash":"8295e112233778d8f20c31b06c19659f60edbb22","modified":1611551371407},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1611551371407},{"_id":"public/js/viewer/pic-viewer.js","hash":"9bf7c37cce781628346803ed7ce8f02623c2d013","modified":1611551371407},{"_id":"public/css/beantech.css","hash":"c192d3170301f774fa4c2185dc125cb3d6ec4929","modified":1611551371407},{"_id":"public/css/beantech.min.css","hash":"66f124242893cae4517119e39e75d7f23eef01ae","modified":1611551371407},{"_id":"public/css/gitalk.css","hash":"51783fd60dff05e8e339ff83b41504538662f6ca","modified":1611551371407},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1611551371407},{"_id":"public/css/themecolor.css","hash":"04e045215c6132af46eb7a85fd0aae3d9302312c","modified":1611551371407},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1611551371407},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1611551371407},{"_id":"public/js/ziploader.js","hash":"9c25324caf53b56cb68839dcfb34e61e5a6a63f3","modified":1611551371407},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1611551371407},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1611551371407},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1611551371407},{"_id":"public/js/viewer/viewer.min.js","hash":"ae5380974b6fb8b0e15356c8418186c6c0821222","modified":1611551371407},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/ans_7.png","hash":"f46094ccc0fa1dc18fa6a1202626871122758cbb","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/ans_6.png","hash":"ae4b46c7a29be817c3a714ed9e82e96e6ba4cf2b","modified":1611551371407},{"_id":"public/js/comment/gitalk.js","hash":"9256bc4b8f7341f60083da291d5c7c9f0fe5f1bd","modified":1611551371407},{"_id":"public/2021/01/21/AIA-ch1-Q-A/cruves.png","hash":"5d7d95fe2928fe72d1189470fb4aff1388a4a028","modified":1611551371407},{"_id":"public/img/header_img/la.jpg","hash":"a43e322e76cac84e3b92995503ae08c8641b9611","modified":1611551371407},{"_id":"public/img/header_img/coast.jpg","hash":"d770c4659027f3d4fe479afb6909ed6968f56d68","modified":1611551371407},{"_id":"public/img/header_img/big_bear_lake.jpg","hash":"f009c33343e5a6dc8835a184fbc9e37a19d8ee7c","modified":1611551371407},{"_id":"public/img/header_img/404_bg.jpg","hash":"9a899c297a352c1664d0b7ec44d5fbc0c8c048fd","modified":1611551371407},{"_id":"public/img/header_img/sumset.jpg","hash":"c572aa5a4ed446f43c898c3864bf8b144844ef35","modified":1611551371407},{"_id":"public/img/header_img/snow.jpg","hash":"0cf9fb6a4fdad42dcc936dc9e90cfd3e5b7b8cef","modified":1611551371407}],"Category":[{"name":"CSCI 570","_id":"ckkc42t1y0003mgtt4lpegilw"}],"Data":[],"Page":[{"layout":"404","description":"uhhhhhh... 你都点到哪里去了，麻溜的后退一步。 赶快！ ","header-img":"img/header_img/404_bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"uhhhhhh... 你都点到哪里去了，麻溜的后退一步。 赶快！ \"\nheader-img: \"img/header_img/404_bg.jpg\"\n---\n","date":"2021-01-14T06:53:32.617Z","updated":"2021-01-14T06:53:32.617Z","path":"404.html","title":"","comments":1,"_id":"ckkc42t0u0000mgtt5wrp7wzo","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About|关于","date":"2021-01-14T06:48:33.000Z","description":"If it hurts, it works. 疼！那就对了。","header-img":"img/header_img/la.jpg","_content":"\n## 搞那么复杂\n我叫杨博(Aaron也可以)\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About|关于\"\ndate: 2021-01-13 22:48:33\ndescription: \"If it hurts, it works. 疼！那就对了。\"\nheader-img: \"img/header_img/la.jpg\"\n---\n\n## 搞那么复杂\n我叫杨博(Aaron也可以)\n","updated":"2021-01-24T06:06:59.780Z","path":"about/index.html","comments":1,"_id":"ckkc42t2e000jmgtt9jir2j66","content":"<h2 id=\"搞那么复杂\"><a href=\"#搞那么复杂\" class=\"headerlink\" title=\"搞那么复杂\"></a>搞那么复杂</h2><p>我叫杨博(Aaron也可以)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"搞那么复杂\"><a href=\"#搞那么复杂\" class=\"headerlink\" title=\"搞那么复杂\"></a>搞那么复杂</h2><p>我叫杨博(Aaron也可以)</p>\n"},{"layout":"categories","title":"Categories|分类","description":"","header-img":"img/header_img/coast.jpg","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"Categories|分类\"\ndescription: \"\"\nheader-img: \"img/header_img/coast.jpg\"\n---\n","date":"2021-01-24T06:07:29.950Z","updated":"2021-01-24T06:07:29.950Z","path":"categories/index.html","comments":1,"_id":"ckkc42t2e000kmgttcjdbg9rt","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"$$[Algorithms \\, In \\, Action]-CH1\\,Review$$","catalog":true,"mathjax":true,"date":"2021-01-21T19:03:51.000Z","subtitle":null,"header-img":"cruves.png","_content":"\nFor any monotonic functions, *f*, *g* from the positive integers to the positive integers, we say **f(n) = O(g(n))** or **f(n) = Ω(g(n))** or **f(n) = Θ(g(n))**\n\n### Concepts\n  - **T(n)** counts the \\# of steps, where *n* is the input size.\n  - **O** big O, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\leqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Ω** big Omega, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\geqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Θ** big Theta, $$\\exists \\, {c_1} \\, and \\, {c_2} $$ which $${c_1}$$ > 0 and $${c_2}$$ > 0 and real number $${n_0}$$, has $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n\n![as](fn_gn.png)\n  \n### Theorems\n  - *G = (V, E), the following statements are equivalent:*<img src=\"lecture.png\" style=\"width:30px;display:inline;box-shadow: none !important;\">\n    > 1. G is a tree.\n    > 2. Every two vertices of G are connected by a unique path\n    > 3. G is connected and V = E + 1\n    > 4. G is acyclic and V = E + 1\n    > 5. G is acyclic and if any two non-adjacent vertices are joined by an edge, the resulting graph has exactly one cycle. \n  - *In an undirected simple graph G = (V, E), there are at most $$\\frac{V \\cdot (V - 1)}{2}$$ edges. In short, by using the asymptotic notation, $$E = O(V^2)$$.*\n  - *three way to traversal a graph:*\n    > 1. depth-first-search\n    > 2. breadth-first-search\n    > 3. topological sort\n      - the result of topological sort is not unique\n  -  *If G is a connected planar graph with V vertices, E edges, and F faces, then V - E + F = 2*\n    > - faces represent disjoint area.\n  - *In any simple connected planar graph with at least 3 vertices, $$E < 3 \\cdot V - 6$$*\n  - *A simple connected planar graph with at least 3 vertices has a vertex of degree 5 or less.*\n  - *[Coloring Planar Graph] every planar graph can be colored with at most six colors.*\n  - *A graph is bipartite if and only if it dose not contain an odd length cycle.*\n  - *A connected graph G is a Eulerian graph if and only if all vertices of G are of even degree*\n\n### Review Q&A\n1. Mark the following assertions as TRUE or FALSE. No need to provide any justification.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  - a. $$n = O(n^2)$$\n    > - **True**. since $$f(n) = n \\, and \\, g(n) = n^2 $$ and this is big O annotation, which requires $$f(n) \t\\leqslant c \\cdot g(n)$$ when  $$n \\geqslant {n_0}$$. <br>In the issue, $$n <= c \\cdot n^2$$, meets the requirements, so it is correct.\n  - b. $$n = O( \\sqrt[2]{n})$$\n    > - **False**. $$n >= c \\cdot \\sqrt[2]{n}$$ should use Ω\n  - c. $$log(n) = Ω(n)$$\n    > - **False**. $$log(n) <= c \\cdot n$$ should use O\n  - d. $$n^2 = \\Omega(n \\cdot log(n))$$\n    > - **True**. $$n^2 >= c \\cdot n \\cdot log(n)$$\n  - e. $$n^2 \\cdot log(n) = \\Theta(n^2)$$\n    > - **False**. $$n^2 \\cdot log(n) >= n^2 $$ should use $$\\Omega$$\n  - f. $$7 \\cdot (log(n))^2 + 2n \\cdot log(n) = Ω(log(n))$$\n    > - **True**. let $$A = log(n)$$, so we have $$7A^2 + 2 \\cdot n \\cdot A >= A$$\n  - g. $$5n \\cdot log(n) + 1024 n \\cdot log(log(n)) = Θ(n \\cdot log(n))$$\n    > - **True**. let $$A = log(n)$$,<br> so we have $$5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) = \\Theta(n \\cdot A)$$. not easy to compare. but we already knew log(n) < n. <br> So $$5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) < 5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot A$$. <br> let $$B = n \\cdot log(n) $$, we will have $$5 \\cdot B + 1024 \\cdot B = 1029B \\, v.s. \\Theta(B)$$. <br>f(n) = 1029B, g(n) = B. There exist many $${c_1} \\, {c_2}$$ could meet $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$.\n  - h. $$2^n + 100 \\cdot n^2 + n^{100}= O(n^{101})$$\n    > - **False**. u can see the head img. $$2^n$$ grow faster than $$n^{100}$$. so left part bigger than right. <br>The statement is wrong, and should use $$\\Omega$$\n  - i. $$(1/3)^n + 100 = O(1)$$\n    > - **False**. $$(1/3)^n$$ will going to zero when n > 0. the left part will never beat the 101. so LHS is smaller or bigger than RHS when choose different *c*. Thus the statement is wrong.\n2. **(T/F)** Any function which is $$Ω(log(n))$$ is also $$Ω(log(log(n)))$$.\n  > - **True**. Assume there is a f(n) >= c * log(n).<br>\n  and we also knew, log(n) > log(log(n)) in any suitation. so we have f(n) >= c * log(n) > c * log(log(n)). \n3. **(T/F)** If f(n) = Θ(g(n)) then g(n) = Θ(f(n))\n  > - **True**. becasue f(n) = Θ(g(n)), we have $$c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)$$. LHS multiplt $$1 / c_1$$ => $$g(n) <= \\frac{1}{c_1}f(n)$$. RHS multiplt $$1 / c_2$$ => $$\\frac{1}{c_2}f(n) <= g(n)$$. <br>In all, we have $$\\frac{1}{c_2}f(n) <= g(n) <= \\frac{1}{c_1}f(n) \\, $$ => $$\\, b_1f(n) <= g(n) <= b_2f(n)$$\n4. **(T/F)** If f(n) = Θ(g(n)) then f(n) = Ω(g(n)).\n  > - **True**. becasue f(n) = Θ(g(n)), we have $$c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)$$. LHS is what you need. so this is true.\n5. **(T/F)** If f(n) = Ω(g(n)) then $$2^{f(n)} = Ω(2^{g(n)})$$.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  > - **False** prove it by contradiction. <br>\n  e.g. f(n) = 2n, g(n) = 4n. when c = 0.25. f(n) >= c * g(n). <br>\n  but $$2^{f(n)} = 4^n, 2^{g(n)} = 16^n$$, $$2^{f(n)} <= 2^{g(n)}$$. so this statement is wrong.\n6. **(T/F)** BFS can be used to find the shortest path between any two nodes in a non-weighted graph.\n  > - **True**. as the professor said. BFS find node in level order.\n7. **(T/F)** A DFS tree is never the same as a BFS tree.\n  > - **False**. could be the same.\n8. **(T/F)** Algorithm A has a running time of $$O(n^2)$$ and algorithm B has a running time of $$O(n \\cdot log(n)).$$ From this we conclude that A can never run faster than B on the same input.\n  > - **False**. Big O annotation is just telling you the maximum time that your algorithm will cost. But when running in real life, the actual data could be easily handled. \n9. **(T/F)** Planar graph is a sparse graph.\n  > - **False**. could be a dense graph.\n10. **(T/F)** Every DAG contains a vertex with no incoming edges.\n  > - **True**. DAG (directed acyclic graph) cannot has a circle.\n\n### Exercise Q&A\n1. Prove g(n) = Ω(f(n)) if and only if f(n) = O(g(n)).\n  > - **Solution** To prove a theorem of the form *A IF AND ONLY IF B*, you first prove *IF A THEN B*, then you prove *IF B THEN A*, and that's enough to complete the proof. \n  >> **Proof**\n  >> - $A \\rightrightarrows B$\n  >>> g(n) = Ω(f(n)), means g(n) >=  c \\* f(n), c > 0 <br>\n    we multiply 1 / c on both side, and we have $$\\frac{1}{c} \\cdot g((n)$$ >= f(n) which equals to <br>  f(n) <= $${b} \\cdot g((n)$$, *b* > 0 , so we can say f(n) = O(g(n)).\n  >> - $B \\leftleftarrows A$\n  >>> f(n) = O(g(n)), means f(n) <= c \\* g(n), c > 0 <br>\n    we multiply 1 / c on both side, and we have $$\\frac{1}{c} \\cdot f((n)$$ <= g(n) which equals to <br>  g(n) >= $${b} \\cdot f((n)$$, *b* > 0 , so we can say g(n) = Ω(f(n)).\n\n2. Prove or disprove f(n) = O(g(n)) implies $$2^{f(n)} = O(2^{g(n)})$$.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  > - **Solution** prove it by contradiction. <br>\n  e.g. f(n) = 2n, g(n) = n. when c = 4. f(n) <= c \\* g(n).<br> \n  but $$2^{f(n)} = 4^n, 2^{g(n)} = 2^n$$, $$2^{f(n)} >= 2^{g(n)}$$. so this statement is wrong.\n\n3. Arrange the following functions<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n$$log(n^n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, 2^{log(n)},\\, (log(n))^2,\\, n^{\\sqrt{2}}$$\nin increasing order of growth rate, with g(n) following f(n) in your list if and only if f(n) = O(g(n)).\n  > - **Solution** we can follow this order\n  $O(1) <= O(log(n)) <= O((log(n))^C) <= O(C^{log(n)}) <= O(n) <= O(n \\cdot log(n)) <= O(n^C) <= O((log(n))!) <= O(n^{log(n)}) <= O(C^n)$\n  And we can simply some of them in first place.\n  $$① \\, log(n^n) = n \\cdot log(n) \\, ⑤ \\, 2^{log_2 n} = log_2 2^n = n \\cdot 1 = n$$,\n  So , finally, we have <br>\n  $nlog(n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, n,\\, (log(n))^2,\\, n^{\\sqrt{2}}$ <br>\n  $O(1) \\Rightarrow None$\n  $O(log(n)) \\Rightarrow None$\n  $O((log(n))^C) \\Rightarrow ⑥$\n  $O(C^{log(n)}) \\Rightarrow None$\n  $O(n) \\Rightarrow ⑤$\n  $O(n \\cdot log(n)) \\Rightarrow ①④ since \\, n > log(n) \\Rightarrow ④①$\n  $O(n^C) \\Rightarrow ②⑦ since \\, \\sqrt(2) < 2 \\, and \\, log(n)\\, grow \\,slower \\,than \\,exponential \\,func $\n  $\\quad especially \\,when \\,a > 1 \\, so, ⑦②$\n  $O((log(n))!) \\Rightarrow None$\n  $O(n^{log(n)}) \\Rightarrow ③$\n  $O(C^n) \\Rightarrow None$<br>\n  the answers is: ⑥<⑤<④<①<⑦<②<③\n  $(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$\n\n4. Arrange the following functions\n$$4^{log(n)},\\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, n^{1/log(n)},\\, (log(n))!$$\nin increasing order of growth rate with g(n) following f(n) in your list if and only if f(n) = O(g(n)).\n  > - **Solution** we can follow this order\n  $O(1) <= O(log(n)) <= O((log(n))^C) <= O(C^{log(n)}) <= O(n) <= O(n \\cdot log(n)) <= O(n^C) <= O((log(n))!) <= O(n^{log(n)}) <= O(C^n)$\n  And we can simply some of them in first place.\n  $$① \\, 4^{log_2 n} = (2^2)^{log(n)} = 2^{2*log(n)} = 2^{log(n^2)} = log_2 2^{n^2} = n^2$$,<br>\n  $$⑥ \\, n^{1/log(n)} = n^{log_2 2/log_2 n} = n^{log_n 2} = 2$$,\n  So , finally, we have <br>\n  $n^2, \\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, 2, \\, (log(n))!$ <br>\n  $O(1) \\Rightarrow ⑥$\n  $O(log(n)) \\Rightarrow None$\n  $O((log(n))^C) \\Rightarrow ②$\n  $O(C^{log(n)}) \\Rightarrow ④⑤ \\quad (\\sqrt{2})^{log(n)} = 2^{log(n) / 2} $\n  $\\quad \\,we \\, can \\, just \\, compare \\, log(n) / 2 \\, v.s. \\sqrt{2 \\cdot log(n)} \\, so, ⑤④$\n  $O(n) \\Rightarrow None$\n  $O(n \\cdot log(n)) \\Rightarrow None$\n  $O(n^C) \\Rightarrow ①$\n  $O((log(n))!) \\Rightarrow ⑦$\n  $O(n^{log(n)}) \\Rightarrow ③$\n  $O(C^n) \\Rightarrow None$ <br>\n  the answers is: ⑥<②<⑤<④<①<⑦<③\n  $(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$\n\n5. What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  void bigOh1 (int n):\n    for i=1 to n\n      j=1;\n      while j < n\n        j = j*2;\n  ```\n  > - **Solution** $$O(n \\cdot log(n))$$\n  > <img src=\"ans_5.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n6. What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  string bigOh3 (int n):\n    if(n == 0) return \"a\";\n    string str = bigOh3(n-1);\n    return str + str;\n  ```\n  > - **Solution** $$O(n \\cdot 2^n)$$\n  > <img src=\"ans_6.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n7. What is the Big-Theta runtime complexity of the following function? Here *find_max* finds the maximum element in the array L[0], L[1], …, L[n - 1].<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  void bigOh2 (int[] L, int n):\n    while (n > 0)\n      find_max(L, n);\n      n = n/4;\n  ```\n  > - **Solution**\n  > <img src=\"ans_7.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n8. The complete graph on n vertices, denoted $$K_n$$, is a simple graph in which there is an edge between every pair of distinct vertices. What is the height of the DFS tree for the complete graph $$K_n$$? What is the height of the BFS tree for the complete graph $$K_n$$?\n  > - **Solution**\n\n9. We are interested in finding a simple path in a directed acyclic graph that visits all vertices once and only once. Design a linear time algorithm to determine if there is such a path in a given DAG.\n  > - **Solution**\n\n10. Prove that a complete graph $$K_5$$ is not a planar graph.\n  > - **Solution**\n\n11. Prove that a complete bipartite graph $$K_{3,3}$$ is not a planar graph.\n  > - **Solution**\n\n12. In a connected bipartite graph, is the bipartition unique? Justify your answer.\n  > - **Solution**\n\n13. Given a directed graph G = (V, E) and a particular node v ∈ V, design a linear time algorithm to determine whether v is in a triangle of edges (a cycle of length 3).\n  > - **Solution**\n\n14. Design a linear time algorithm which, given an undirected graph G = (V, E) and a particular edge e ∈ E, determines whether G has a cycle containing e.\n  > - **Solution**\n\n15. Given an undirected graph G = (V, E), prove that S is an independent set if and only if V - S is a vertex cover\n  > - **Solution**\n\n","source":"_posts/AIA-ch1-Q-A.md","raw":"---\ntitle: $$[Algorithms \\, In \\, Action]-CH1\\,Review$$\ncatalog: true\nmathjax: true\ndate: 2021-01-21 11:03:51\nsubtitle:\nheader-img: cruves.png\ntags:\n- Review\n- Graph\n- Q&A\ncategories:\n- CSCI 570\n---\n\nFor any monotonic functions, *f*, *g* from the positive integers to the positive integers, we say **f(n) = O(g(n))** or **f(n) = Ω(g(n))** or **f(n) = Θ(g(n))**\n\n### Concepts\n  - **T(n)** counts the \\# of steps, where *n* is the input size.\n  - **O** big O, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\leqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Ω** big Omega, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\geqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Θ** big Theta, $$\\exists \\, {c_1} \\, and \\, {c_2} $$ which $${c_1}$$ > 0 and $${c_2}$$ > 0 and real number $${n_0}$$, has $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n\n![as](fn_gn.png)\n  \n### Theorems\n  - *G = (V, E), the following statements are equivalent:*<img src=\"lecture.png\" style=\"width:30px;display:inline;box-shadow: none !important;\">\n    > 1. G is a tree.\n    > 2. Every two vertices of G are connected by a unique path\n    > 3. G is connected and V = E + 1\n    > 4. G is acyclic and V = E + 1\n    > 5. G is acyclic and if any two non-adjacent vertices are joined by an edge, the resulting graph has exactly one cycle. \n  - *In an undirected simple graph G = (V, E), there are at most $$\\frac{V \\cdot (V - 1)}{2}$$ edges. In short, by using the asymptotic notation, $$E = O(V^2)$$.*\n  - *three way to traversal a graph:*\n    > 1. depth-first-search\n    > 2. breadth-first-search\n    > 3. topological sort\n      - the result of topological sort is not unique\n  -  *If G is a connected planar graph with V vertices, E edges, and F faces, then V - E + F = 2*\n    > - faces represent disjoint area.\n  - *In any simple connected planar graph with at least 3 vertices, $$E < 3 \\cdot V - 6$$*\n  - *A simple connected planar graph with at least 3 vertices has a vertex of degree 5 or less.*\n  - *[Coloring Planar Graph] every planar graph can be colored with at most six colors.*\n  - *A graph is bipartite if and only if it dose not contain an odd length cycle.*\n  - *A connected graph G is a Eulerian graph if and only if all vertices of G are of even degree*\n\n### Review Q&A\n1. Mark the following assertions as TRUE or FALSE. No need to provide any justification.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  - a. $$n = O(n^2)$$\n    > - **True**. since $$f(n) = n \\, and \\, g(n) = n^2 $$ and this is big O annotation, which requires $$f(n) \t\\leqslant c \\cdot g(n)$$ when  $$n \\geqslant {n_0}$$. <br>In the issue, $$n <= c \\cdot n^2$$, meets the requirements, so it is correct.\n  - b. $$n = O( \\sqrt[2]{n})$$\n    > - **False**. $$n >= c \\cdot \\sqrt[2]{n}$$ should use Ω\n  - c. $$log(n) = Ω(n)$$\n    > - **False**. $$log(n) <= c \\cdot n$$ should use O\n  - d. $$n^2 = \\Omega(n \\cdot log(n))$$\n    > - **True**. $$n^2 >= c \\cdot n \\cdot log(n)$$\n  - e. $$n^2 \\cdot log(n) = \\Theta(n^2)$$\n    > - **False**. $$n^2 \\cdot log(n) >= n^2 $$ should use $$\\Omega$$\n  - f. $$7 \\cdot (log(n))^2 + 2n \\cdot log(n) = Ω(log(n))$$\n    > - **True**. let $$A = log(n)$$, so we have $$7A^2 + 2 \\cdot n \\cdot A >= A$$\n  - g. $$5n \\cdot log(n) + 1024 n \\cdot log(log(n)) = Θ(n \\cdot log(n))$$\n    > - **True**. let $$A = log(n)$$,<br> so we have $$5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) = \\Theta(n \\cdot A)$$. not easy to compare. but we already knew log(n) < n. <br> So $$5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) < 5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot A$$. <br> let $$B = n \\cdot log(n) $$, we will have $$5 \\cdot B + 1024 \\cdot B = 1029B \\, v.s. \\Theta(B)$$. <br>f(n) = 1029B, g(n) = B. There exist many $${c_1} \\, {c_2}$$ could meet $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$.\n  - h. $$2^n + 100 \\cdot n^2 + n^{100}= O(n^{101})$$\n    > - **False**. u can see the head img. $$2^n$$ grow faster than $$n^{100}$$. so left part bigger than right. <br>The statement is wrong, and should use $$\\Omega$$\n  - i. $$(1/3)^n + 100 = O(1)$$\n    > - **False**. $$(1/3)^n$$ will going to zero when n > 0. the left part will never beat the 101. so LHS is smaller or bigger than RHS when choose different *c*. Thus the statement is wrong.\n2. **(T/F)** Any function which is $$Ω(log(n))$$ is also $$Ω(log(log(n)))$$.\n  > - **True**. Assume there is a f(n) >= c * log(n).<br>\n  and we also knew, log(n) > log(log(n)) in any suitation. so we have f(n) >= c * log(n) > c * log(log(n)). \n3. **(T/F)** If f(n) = Θ(g(n)) then g(n) = Θ(f(n))\n  > - **True**. becasue f(n) = Θ(g(n)), we have $$c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)$$. LHS multiplt $$1 / c_1$$ => $$g(n) <= \\frac{1}{c_1}f(n)$$. RHS multiplt $$1 / c_2$$ => $$\\frac{1}{c_2}f(n) <= g(n)$$. <br>In all, we have $$\\frac{1}{c_2}f(n) <= g(n) <= \\frac{1}{c_1}f(n) \\, $$ => $$\\, b_1f(n) <= g(n) <= b_2f(n)$$\n4. **(T/F)** If f(n) = Θ(g(n)) then f(n) = Ω(g(n)).\n  > - **True**. becasue f(n) = Θ(g(n)), we have $$c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)$$. LHS is what you need. so this is true.\n5. **(T/F)** If f(n) = Ω(g(n)) then $$2^{f(n)} = Ω(2^{g(n)})$$.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  > - **False** prove it by contradiction. <br>\n  e.g. f(n) = 2n, g(n) = 4n. when c = 0.25. f(n) >= c * g(n). <br>\n  but $$2^{f(n)} = 4^n, 2^{g(n)} = 16^n$$, $$2^{f(n)} <= 2^{g(n)}$$. so this statement is wrong.\n6. **(T/F)** BFS can be used to find the shortest path between any two nodes in a non-weighted graph.\n  > - **True**. as the professor said. BFS find node in level order.\n7. **(T/F)** A DFS tree is never the same as a BFS tree.\n  > - **False**. could be the same.\n8. **(T/F)** Algorithm A has a running time of $$O(n^2)$$ and algorithm B has a running time of $$O(n \\cdot log(n)).$$ From this we conclude that A can never run faster than B on the same input.\n  > - **False**. Big O annotation is just telling you the maximum time that your algorithm will cost. But when running in real life, the actual data could be easily handled. \n9. **(T/F)** Planar graph is a sparse graph.\n  > - **False**. could be a dense graph.\n10. **(T/F)** Every DAG contains a vertex with no incoming edges.\n  > - **True**. DAG (directed acyclic graph) cannot has a circle.\n\n### Exercise Q&A\n1. Prove g(n) = Ω(f(n)) if and only if f(n) = O(g(n)).\n  > - **Solution** To prove a theorem of the form *A IF AND ONLY IF B*, you first prove *IF A THEN B*, then you prove *IF B THEN A*, and that's enough to complete the proof. \n  >> **Proof**\n  >> - $A \\rightrightarrows B$\n  >>> g(n) = Ω(f(n)), means g(n) >=  c \\* f(n), c > 0 <br>\n    we multiply 1 / c on both side, and we have $$\\frac{1}{c} \\cdot g((n)$$ >= f(n) which equals to <br>  f(n) <= $${b} \\cdot g((n)$$, *b* > 0 , so we can say f(n) = O(g(n)).\n  >> - $B \\leftleftarrows A$\n  >>> f(n) = O(g(n)), means f(n) <= c \\* g(n), c > 0 <br>\n    we multiply 1 / c on both side, and we have $$\\frac{1}{c} \\cdot f((n)$$ <= g(n) which equals to <br>  g(n) >= $${b} \\cdot f((n)$$, *b* > 0 , so we can say g(n) = Ω(f(n)).\n\n2. Prove or disprove f(n) = O(g(n)) implies $$2^{f(n)} = O(2^{g(n)})$$.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  > - **Solution** prove it by contradiction. <br>\n  e.g. f(n) = 2n, g(n) = n. when c = 4. f(n) <= c \\* g(n).<br> \n  but $$2^{f(n)} = 4^n, 2^{g(n)} = 2^n$$, $$2^{f(n)} >= 2^{g(n)}$$. so this statement is wrong.\n\n3. Arrange the following functions<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n$$log(n^n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, 2^{log(n)},\\, (log(n))^2,\\, n^{\\sqrt{2}}$$\nin increasing order of growth rate, with g(n) following f(n) in your list if and only if f(n) = O(g(n)).\n  > - **Solution** we can follow this order\n  $O(1) <= O(log(n)) <= O((log(n))^C) <= O(C^{log(n)}) <= O(n) <= O(n \\cdot log(n)) <= O(n^C) <= O((log(n))!) <= O(n^{log(n)}) <= O(C^n)$\n  And we can simply some of them in first place.\n  $$① \\, log(n^n) = n \\cdot log(n) \\, ⑤ \\, 2^{log_2 n} = log_2 2^n = n \\cdot 1 = n$$,\n  So , finally, we have <br>\n  $nlog(n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, n,\\, (log(n))^2,\\, n^{\\sqrt{2}}$ <br>\n  $O(1) \\Rightarrow None$\n  $O(log(n)) \\Rightarrow None$\n  $O((log(n))^C) \\Rightarrow ⑥$\n  $O(C^{log(n)}) \\Rightarrow None$\n  $O(n) \\Rightarrow ⑤$\n  $O(n \\cdot log(n)) \\Rightarrow ①④ since \\, n > log(n) \\Rightarrow ④①$\n  $O(n^C) \\Rightarrow ②⑦ since \\, \\sqrt(2) < 2 \\, and \\, log(n)\\, grow \\,slower \\,than \\,exponential \\,func $\n  $\\quad especially \\,when \\,a > 1 \\, so, ⑦②$\n  $O((log(n))!) \\Rightarrow None$\n  $O(n^{log(n)}) \\Rightarrow ③$\n  $O(C^n) \\Rightarrow None$<br>\n  the answers is: ⑥<⑤<④<①<⑦<②<③\n  $(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$\n\n4. Arrange the following functions\n$$4^{log(n)},\\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, n^{1/log(n)},\\, (log(n))!$$\nin increasing order of growth rate with g(n) following f(n) in your list if and only if f(n) = O(g(n)).\n  > - **Solution** we can follow this order\n  $O(1) <= O(log(n)) <= O((log(n))^C) <= O(C^{log(n)}) <= O(n) <= O(n \\cdot log(n)) <= O(n^C) <= O((log(n))!) <= O(n^{log(n)}) <= O(C^n)$\n  And we can simply some of them in first place.\n  $$① \\, 4^{log_2 n} = (2^2)^{log(n)} = 2^{2*log(n)} = 2^{log(n^2)} = log_2 2^{n^2} = n^2$$,<br>\n  $$⑥ \\, n^{1/log(n)} = n^{log_2 2/log_2 n} = n^{log_n 2} = 2$$,\n  So , finally, we have <br>\n  $n^2, \\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, 2, \\, (log(n))!$ <br>\n  $O(1) \\Rightarrow ⑥$\n  $O(log(n)) \\Rightarrow None$\n  $O((log(n))^C) \\Rightarrow ②$\n  $O(C^{log(n)}) \\Rightarrow ④⑤ \\quad (\\sqrt{2})^{log(n)} = 2^{log(n) / 2} $\n  $\\quad \\,we \\, can \\, just \\, compare \\, log(n) / 2 \\, v.s. \\sqrt{2 \\cdot log(n)} \\, so, ⑤④$\n  $O(n) \\Rightarrow None$\n  $O(n \\cdot log(n)) \\Rightarrow None$\n  $O(n^C) \\Rightarrow ①$\n  $O((log(n))!) \\Rightarrow ⑦$\n  $O(n^{log(n)}) \\Rightarrow ③$\n  $O(C^n) \\Rightarrow None$ <br>\n  the answers is: ⑥<②<⑤<④<①<⑦<③\n  $(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$\n\n5. What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  void bigOh1 (int n):\n    for i=1 to n\n      j=1;\n      while j < n\n        j = j*2;\n  ```\n  > - **Solution** $$O(n \\cdot log(n))$$\n  > <img src=\"ans_5.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n6. What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  string bigOh3 (int n):\n    if(n == 0) return \"a\";\n    string str = bigOh3(n-1);\n    return str + str;\n  ```\n  > - **Solution** $$O(n \\cdot 2^n)$$\n  > <img src=\"ans_6.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n7. What is the Big-Theta runtime complexity of the following function? Here *find_max* finds the maximum element in the array L[0], L[1], …, L[n - 1].<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n  ```\n  void bigOh2 (int[] L, int n):\n    while (n > 0)\n      find_max(L, n);\n      n = n/4;\n  ```\n  > - **Solution**\n  > <img src=\"ans_7.png\"  style=\"display:inline;box-shadow: none !important;\">\n\n8. The complete graph on n vertices, denoted $$K_n$$, is a simple graph in which there is an edge between every pair of distinct vertices. What is the height of the DFS tree for the complete graph $$K_n$$? What is the height of the BFS tree for the complete graph $$K_n$$?\n  > - **Solution**\n\n9. We are interested in finding a simple path in a directed acyclic graph that visits all vertices once and only once. Design a linear time algorithm to determine if there is such a path in a given DAG.\n  > - **Solution**\n\n10. Prove that a complete graph $$K_5$$ is not a planar graph.\n  > - **Solution**\n\n11. Prove that a complete bipartite graph $$K_{3,3}$$ is not a planar graph.\n  > - **Solution**\n\n12. In a connected bipartite graph, is the bipartition unique? Justify your answer.\n  > - **Solution**\n\n13. Given a directed graph G = (V, E) and a particular node v ∈ V, design a linear time algorithm to determine whether v is in a triangle of edges (a cycle of length 3).\n  > - **Solution**\n\n14. Design a linear time algorithm which, given an undirected graph G = (V, E) and a particular edge e ∈ E, determines whether G has a cycle containing e.\n  > - **Solution**\n\n15. Given an undirected graph G = (V, E), prove that S is an independent set if and only if V - S is a vertex cover\n  > - **Solution**\n\n","slug":"AIA-ch1-Q-A","published":1,"updated":"2021-01-25T05:08:51.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc42t1t0001mgtt2lgfdehe","content":"<p>For any monotonic functions, <em>f</em>, <em>g</em> from the positive integers to the positive integers, we say <strong>f(n) = O(g(n))</strong> or <strong>f(n) = Ω(g(n))</strong> or <strong>f(n) = Θ(g(n))</strong></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><ul>\n<li><strong>T(n)</strong> counts the # of steps, where <em>n</em> is the input size.</li>\n<li><strong>O</strong> big O, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Ω</strong> big Omega, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\geqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Θ</strong> big Theta, <script type=\"math/tex\">\\exists \\, {c_1} \\, and \\, {c_2}</script> which <script type=\"math/tex\">{c_1}</script> &gt; 0 and <script type=\"math/tex\">{c_2}</script> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n</ul>\n<p><img src=\"fn_gn.png\" alt=\"as\"></p>\n<h3 id=\"Theorems\"><a href=\"#Theorems\" class=\"headerlink\" title=\"Theorems\"></a>Theorems</h3><ul>\n<li><em>G = (V, E), the following statements are equivalent:</em><img src=\"lecture.png\" style=\"width:30px;display:inline;box-shadow: none !important;\"><blockquote>\n<ol>\n<li>G is a tree.</li>\n<li>Every two vertices of G are connected by a unique path</li>\n<li>G is connected and V = E + 1</li>\n<li>G is acyclic and V = E + 1</li>\n<li>G is acyclic and if any two non-adjacent vertices are joined by an edge, the resulting graph has exactly one cycle. </li>\n</ol>\n</blockquote>\n</li>\n<li><em>In an undirected simple graph G = (V, E), there are at most <script type=\"math/tex\">\\frac{V \\cdot (V - 1)}{2}</script> edges. In short, by using the asymptotic notation, <script type=\"math/tex\">E = O(V^2)</script>.</em></li>\n<li><em>three way to traversal a graph:</em><blockquote>\n<ol>\n<li>depth-first-search</li>\n<li>breadth-first-search</li>\n<li>topological sort<ul>\n<li>the result of topological sort is not unique</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><em>If G is a connected planar graph with V vertices, E edges, and F faces, then V - E + F = 2</em><blockquote>\n<ul>\n<li>faces represent disjoint area.</li>\n</ul>\n</blockquote>\n</li>\n<li><em>In any simple connected planar graph with at least 3 vertices, <script type=\"math/tex\">E < 3 \\cdot V - 6</script></em></li>\n<li><em>A simple connected planar graph with at least 3 vertices has a vertex of degree 5 or less.</em></li>\n<li><em>[Coloring Planar Graph] every planar graph can be colored with at most six colors.</em></li>\n<li><em>A graph is bipartite if and only if it dose not contain an odd length cycle.</em></li>\n<li><em>A connected graph G is a Eulerian graph if and only if all vertices of G are of even degree</em></li>\n</ul>\n<h3 id=\"Review-Q-amp-A\"><a href=\"#Review-Q-amp-A\" class=\"headerlink\" title=\"Review Q&amp;A\"></a>Review Q&amp;A</h3><ol>\n<li>Mark the following assertions as TRUE or FALSE. No need to provide any justification.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"><ul>\n<li>a. <script type=\"math/tex\">n = O(n^2)</script><blockquote>\n<ul>\n<li><strong>True</strong>. since <script type=\"math/tex\">f(n) = n \\, and \\, g(n) = n^2</script> and this is big O annotation, which requires <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script> when  <script type=\"math/tex\">n \\geqslant {n_0}</script>. <br>In the issue, <script type=\"math/tex\">n <= c \\cdot n^2</script>, meets the requirements, so it is correct.</li>\n</ul>\n</blockquote>\n</li>\n<li>b. <script type=\"math/tex\">n = O( \\sqrt[2]{n})</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">n >= c \\cdot \\sqrt[2]{n}</script> should use Ω</li>\n</ul>\n</blockquote>\n</li>\n<li>c. <script type=\"math/tex\">log(n) = Ω(n)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">log(n) <= c \\cdot n</script> should use O</li>\n</ul>\n</blockquote>\n</li>\n<li>d. <script type=\"math/tex\">n^2 = \\Omega(n \\cdot log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. <script type=\"math/tex\">n^2 >= c \\cdot n \\cdot log(n)</script></li>\n</ul>\n</blockquote>\n</li>\n<li>e. <script type=\"math/tex\">n^2 \\cdot log(n) = \\Theta(n^2)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">n^2 \\cdot log(n) >= n^2</script> should use <script type=\"math/tex\">\\Omega</script></li>\n</ul>\n</blockquote>\n</li>\n<li>f. <script type=\"math/tex\">7 \\cdot (log(n))^2 + 2n \\cdot log(n) = Ω(log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. let <script type=\"math/tex\">A = log(n)</script>, so we have <script type=\"math/tex\">7A^2 + 2 \\cdot n \\cdot A >= A</script></li>\n</ul>\n</blockquote>\n</li>\n<li>g. <script type=\"math/tex\">5n \\cdot log(n) + 1024 n \\cdot log(log(n)) = Θ(n \\cdot log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. let <script type=\"math/tex\">A = log(n)</script>,<br> so we have <script type=\"math/tex\">5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) = \\Theta(n \\cdot A)</script>. not easy to compare. but we already knew log(n) &lt; n. <br> So <script type=\"math/tex\">5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) < 5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot A</script>. <br> let <script type=\"math/tex\">B = n \\cdot log(n)</script>, we will have <script type=\"math/tex\">5 \\cdot B + 1024 \\cdot B = 1029B \\, v.s. \\Theta(B)</script>. <br>f(n) = 1029B, g(n) = B. There exist many <script type=\"math/tex\">{c_1} \\, {c_2}</script> could meet <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>.</li>\n</ul>\n</blockquote>\n</li>\n<li>h. <script type=\"math/tex\">2^n + 100 \\cdot n^2 + n^{100}= O(n^{101})</script><blockquote>\n<ul>\n<li><strong>False</strong>. u can see the head img. <script type=\"math/tex\">2^n</script> grow faster than <script type=\"math/tex\">n^{100}</script>. so left part bigger than right. <br>The statement is wrong, and should use <script type=\"math/tex\">\\Omega</script></li>\n</ul>\n</blockquote>\n</li>\n<li>i. <script type=\"math/tex\">(1/3)^n + 100 = O(1)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">(1/3)^n</script> will going to zero when n &gt; 0. the left part will never beat the 101. so LHS is smaller or bigger than RHS when choose different <em>c</em>. Thus the statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><strong>(T/F)</strong> Any function which is <script type=\"math/tex\">Ω(log(n))</script> is also <script type=\"math/tex\">Ω(log(log(n)))</script>.<blockquote>\n<ul>\n<li><strong>True</strong>. Assume there is a f(n) &gt;= c <em> log(n).<br><br>and we also knew, log(n) &gt; log(log(n)) in any suitation. so we have f(n) &gt;= c </em> log(n) &gt; c * log(log(n)). </li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Θ(g(n)) then g(n) = Θ(f(n))<blockquote>\n<ul>\n<li><strong>True</strong>. becasue f(n) = Θ(g(n)), we have <script type=\"math/tex\">c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)</script>. LHS multiplt <script type=\"math/tex\">1 / c_1</script> =&gt; <script type=\"math/tex\">g(n) <= \\frac{1}{c_1}f(n)</script>. RHS multiplt <script type=\"math/tex\">1 / c_2</script> =&gt; <script type=\"math/tex\">\\frac{1}{c_2}f(n) <= g(n)</script>. <br>In all, we have <script type=\"math/tex\">\\frac{1}{c_2}f(n) <= g(n) <= \\frac{1}{c_1}f(n) \\,</script> =&gt; <script type=\"math/tex\">\\, b_1f(n) <= g(n) <= b_2f(n)</script></li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Θ(g(n)) then f(n) = Ω(g(n)).<blockquote>\n<ul>\n<li><strong>True</strong>. becasue f(n) = Θ(g(n)), we have <script type=\"math/tex\">c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)</script>. LHS is what you need. so this is true.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Ω(g(n)) then <script type=\"math/tex\">2^{f(n)} = Ω(2^{g(n)})</script>.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"><blockquote>\n<ul>\n<li><strong>False</strong> prove it by contradiction. <br><br>e.g. f(n) = 2n, g(n) = 4n. when c = 0.25. f(n) &gt;= c * g(n). <br><br>but <script type=\"math/tex\">2^{f(n)} = 4^n, 2^{g(n)} = 16^n</script>, <script type=\"math/tex\">2^{f(n)} <= 2^{g(n)}</script>. so this statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> BFS can be used to find the shortest path between any two nodes in a non-weighted graph.<blockquote>\n<ul>\n<li><strong>True</strong>. as the professor said. BFS find node in level order.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> A DFS tree is never the same as a BFS tree.<blockquote>\n<ul>\n<li><strong>False</strong>. could be the same.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Algorithm A has a running time of <script type=\"math/tex\">O(n^2)</script> and algorithm B has a running time of <script type=\"math/tex\">O(n \\cdot log(n)).</script> From this we conclude that A can never run faster than B on the same input.<blockquote>\n<ul>\n<li><strong>False</strong>. Big O annotation is just telling you the maximum time that your algorithm will cost. But when running in real life, the actual data could be easily handled. </li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Planar graph is a sparse graph.<blockquote>\n<ul>\n<li><strong>False</strong>. could be a dense graph.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Every DAG contains a vertex with no incoming edges.<blockquote>\n<ul>\n<li><strong>True</strong>. DAG (directed acyclic graph) cannot has a circle.</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Exercise-Q-amp-A\"><a href=\"#Exercise-Q-amp-A\" class=\"headerlink\" title=\"Exercise Q&amp;A\"></a>Exercise Q&amp;A</h3><ol>\n<li><p>Prove g(n) = Ω(f(n)) if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> To prove a theorem of the form <em>A IF AND ONLY IF B</em>, you first prove <em>IF A THEN B</em>, then you prove <em>IF B THEN A</em>, and that’s enough to complete the proof. <blockquote>\n<p><strong>Proof</strong></p>\n<ul>\n<li>$A \\rightrightarrows B$<blockquote>\n<p>g(n) = Ω(f(n)), means g(n) &gt;=  c * f(n), c &gt; 0 <br><br>we multiply 1 / c on both side, and we have <script type=\"math/tex\">\\frac{1}{c} \\cdot g((n)</script> &gt;= f(n) which equals to <br>  f(n) &lt;= <script type=\"math/tex\">{b} \\cdot g((n)</script>, <em>b</em> &gt; 0 , so we can say f(n) = O(g(n)).</p>\n</blockquote>\n</li>\n<li>$B \\leftleftarrows A$<blockquote>\n<p>f(n) = O(g(n)), means f(n) &lt;= c * g(n), c &gt; 0 <br><br>we multiply 1 / c on both side, and we have <script type=\"math/tex\">\\frac{1}{c} \\cdot f((n)</script> &lt;= g(n) which equals to <br>  g(n) &gt;= <script type=\"math/tex\">{b} \\cdot f((n)</script>, <em>b</em> &gt; 0 , so we can say g(n) = Ω(f(n)).</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove or disprove f(n) = O(g(n)) implies <script type=\"math/tex\">2^{f(n)} = O(2^{g(n)})</script>.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> prove it by contradiction. <br><br>e.g. f(n) = 2n, g(n) = n. when c = 4. f(n) &lt;= c * g(n).<br><br>but <script type=\"math/tex\">2^{f(n)} = 4^n, 2^{g(n)} = 2^n</script>, <script type=\"math/tex\">2^{f(n)} >= 2^{g(n)}</script>. so this statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Arrange the following functions<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<script type=\"math/tex; mode=display\">log(n^n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, 2^{log(n)},\\, (log(n))^2,\\, n^{\\sqrt{2}}</script><p>in increasing order of growth rate, with g(n) following f(n) in your list if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> we can follow this order<br>$O(1) &lt;= O(log(n)) &lt;= O((log(n))^C) &lt;= O(C^{log(n)}) &lt;= O(n) &lt;= O(n \\cdot log(n)) &lt;= O(n^C) &lt;= O((log(n))!) &lt;= O(n^{log(n)}) &lt;= O(C^n)$<br>And we can simply some of them in first place.<br><script type=\"math/tex\">① \\, log(n^n) = n \\cdot log(n) \\, ⑤ \\, 2^{log_2 n} = log_2 2^n = n \\cdot 1 = n</script>,<br>So , finally, we have <br><br>$nlog(n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, n,\\, (log(n))^2,\\, n^{\\sqrt{2}}$ <br><br>$O(1) \\Rightarrow None$<br>$O(log(n)) \\Rightarrow None$<br>$O((log(n))^C) \\Rightarrow ⑥$<br>$O(C^{log(n)}) \\Rightarrow None$<br>$O(n) \\Rightarrow ⑤$<br>$O(n \\cdot log(n)) \\Rightarrow ①④ since \\, n &gt; log(n) \\Rightarrow ④①$<br>$O(n^C) \\Rightarrow ②⑦ since \\, \\sqrt(2) &lt; 2 \\, and \\, log(n)\\, grow \\,slower \\,than \\,exponential \\,func $<br>$\\quad especially \\,when \\,a &gt; 1 \\, so, ⑦②$<br>$O((log(n))!) \\Rightarrow None$<br>$O(n^{log(n)}) \\Rightarrow ③$<br>$O(C^n) \\Rightarrow None$<br><br>the answers is: ⑥&lt;⑤&lt;④&lt;①&lt;⑦&lt;②&lt;③<br>$(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Arrange the following functions</p>\n<script type=\"math/tex; mode=display\">4^{log(n)},\\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, n^{1/log(n)},\\, (log(n))!</script><p>in increasing order of growth rate with g(n) following f(n) in your list if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> we can follow this order<br>$O(1) &lt;= O(log(n)) &lt;= O((log(n))^C) &lt;= O(C^{log(n)}) &lt;= O(n) &lt;= O(n \\cdot log(n)) &lt;= O(n^C) &lt;= O((log(n))!) &lt;= O(n^{log(n)}) &lt;= O(C^n)$<br>And we can simply some of them in first place.<br><script type=\"math/tex\">① \\, 4^{log_2 n} = (2^2)^{log(n)} = 2^{2*log(n)} = 2^{log(n^2)} = log_2 2^{n^2} = n^2</script>,<br><br><script type=\"math/tex\">⑥ \\, n^{1/log(n)} = n^{log_2 2/log_2 n} = n^{log_n 2} = 2</script>,<br>So , finally, we have <br><br>$n^2, \\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, 2, \\, (log(n))!$ <br><br>$O(1) \\Rightarrow ⑥$<br>$O(log(n)) \\Rightarrow None$<br>$O((log(n))^C) \\Rightarrow ②$<br>$O(C^{log(n)}) \\Rightarrow ④⑤ \\quad (\\sqrt{2})^{log(n)} = 2^{log(n) / 2} $<br>$\\quad \\,we \\, can \\, just \\, compare \\, log(n) / 2 \\, v.s. \\sqrt{2 \\cdot log(n)} \\, so, ⑤④$<br>$O(n) \\Rightarrow None$<br>$O(n \\cdot log(n)) \\Rightarrow None$<br>$O(n^C) \\Rightarrow ①$<br>$O((log(n))!) \\Rightarrow ⑦$<br>$O(n^{log(n)}) \\Rightarrow ③$<br>$O(C^n) \\Rightarrow None$ <br><br>the answers is: ⑥&lt;②&lt;⑤&lt;④&lt;①&lt;⑦&lt;③<br>$(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$</li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bigOh1 (int n):</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"attribute\">i</span>=1 <span class=\"keyword\">to</span> n</span><br><span class=\"line\">    <span class=\"attribute\">j</span>=1;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt; n</span><br><span class=\"line\">      j = j<span class=\"number\">*2</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> <script type=\"math/tex\">O(n \\cdot log(n))</script><br><img src=\"ans_5.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> bigOh3 (<span class=\"built_in\">int</span> n):</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> str = bigOh3(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str + str;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> <script type=\"math/tex\">O(n \\cdot 2^n)</script><br><img src=\"ans_6.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-Theta runtime complexity of the following function? Here <em>find_max</em> finds the maximum element in the array L[0], L[1], …, L[n - 1].<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bigOh2 (<span class=\"built_in\">int</span>[] L, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>)<span class=\"symbol\">:</span></span><br><span class=\"line\">  while (<span class=\"built_in\">n</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    find_max(L, <span class=\"built_in\">n</span>);</span><br><span class=\"line\">    <span class=\"built_in\">n</span> = <span class=\"built_in\">n</span>/<span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong><br><img src=\"ans_7.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>The complete graph on n vertices, denoted <script type=\"math/tex\">K_n</script>, is a simple graph in which there is an edge between every pair of distinct vertices. What is the height of the DFS tree for the complete graph <script type=\"math/tex\">K_n</script>? What is the height of the BFS tree for the complete graph <script type=\"math/tex\">K_n</script>?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We are interested in finding a simple path in a directed acyclic graph that visits all vertices once and only once. Design a linear time algorithm to determine if there is such a path in a given DAG.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove that a complete graph <script type=\"math/tex\">K_5</script> is not a planar graph.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove that a complete bipartite graph <script type=\"math/tex\">K_{3,3}</script> is not a planar graph.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>In a connected bipartite graph, is the bipartition unique? Justify your answer.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Given a directed graph G = (V, E) and a particular node v ∈ V, design a linear time algorithm to determine whether v is in a triangle of edges (a cycle of length 3).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Design a linear time algorithm which, given an undirected graph G = (V, E) and a particular edge e ∈ E, determines whether G has a cycle containing e.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Given an undirected graph G = (V, E), prove that S is an independent set if and only if V - S is a vertex cover</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>For any monotonic functions, <em>f</em>, <em>g</em> from the positive integers to the positive integers, we say <strong>f(n) = O(g(n))</strong> or <strong>f(n) = Ω(g(n))</strong> or <strong>f(n) = Θ(g(n))</strong></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><ul>\n<li><strong>T(n)</strong> counts the # of steps, where <em>n</em> is the input size.</li>\n<li><strong>O</strong> big O, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Ω</strong> big Omega, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\geqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Θ</strong> big Theta, <script type=\"math/tex\">\\exists \\, {c_1} \\, and \\, {c_2}</script> which <script type=\"math/tex\">{c_1}</script> &gt; 0 and <script type=\"math/tex\">{c_2}</script> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n</ul>\n<p><img src=\"fn_gn.png\" alt=\"as\"></p>\n<h3 id=\"Theorems\"><a href=\"#Theorems\" class=\"headerlink\" title=\"Theorems\"></a>Theorems</h3><ul>\n<li><em>G = (V, E), the following statements are equivalent:</em><img src=\"lecture.png\" style=\"width:30px;display:inline;box-shadow: none !important;\"><blockquote>\n<ol>\n<li>G is a tree.</li>\n<li>Every two vertices of G are connected by a unique path</li>\n<li>G is connected and V = E + 1</li>\n<li>G is acyclic and V = E + 1</li>\n<li>G is acyclic and if any two non-adjacent vertices are joined by an edge, the resulting graph has exactly one cycle. </li>\n</ol>\n</blockquote>\n</li>\n<li><em>In an undirected simple graph G = (V, E), there are at most <script type=\"math/tex\">\\frac{V \\cdot (V - 1)}{2}</script> edges. In short, by using the asymptotic notation, <script type=\"math/tex\">E = O(V^2)</script>.</em></li>\n<li><em>three way to traversal a graph:</em><blockquote>\n<ol>\n<li>depth-first-search</li>\n<li>breadth-first-search</li>\n<li>topological sort<ul>\n<li>the result of topological sort is not unique</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><em>If G is a connected planar graph with V vertices, E edges, and F faces, then V - E + F = 2</em><blockquote>\n<ul>\n<li>faces represent disjoint area.</li>\n</ul>\n</blockquote>\n</li>\n<li><em>In any simple connected planar graph with at least 3 vertices, <script type=\"math/tex\">E < 3 \\cdot V - 6</script></em></li>\n<li><em>A simple connected planar graph with at least 3 vertices has a vertex of degree 5 or less.</em></li>\n<li><em>[Coloring Planar Graph] every planar graph can be colored with at most six colors.</em></li>\n<li><em>A graph is bipartite if and only if it dose not contain an odd length cycle.</em></li>\n<li><em>A connected graph G is a Eulerian graph if and only if all vertices of G are of even degree</em></li>\n</ul>\n<h3 id=\"Review-Q-amp-A\"><a href=\"#Review-Q-amp-A\" class=\"headerlink\" title=\"Review Q&amp;A\"></a>Review Q&amp;A</h3><ol>\n<li>Mark the following assertions as TRUE or FALSE. No need to provide any justification.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"><ul>\n<li>a. <script type=\"math/tex\">n = O(n^2)</script><blockquote>\n<ul>\n<li><strong>True</strong>. since <script type=\"math/tex\">f(n) = n \\, and \\, g(n) = n^2</script> and this is big O annotation, which requires <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script> when  <script type=\"math/tex\">n \\geqslant {n_0}</script>. <br>In the issue, <script type=\"math/tex\">n <= c \\cdot n^2</script>, meets the requirements, so it is correct.</li>\n</ul>\n</blockquote>\n</li>\n<li>b. <script type=\"math/tex\">n = O( \\sqrt[2]{n})</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">n >= c \\cdot \\sqrt[2]{n}</script> should use Ω</li>\n</ul>\n</blockquote>\n</li>\n<li>c. <script type=\"math/tex\">log(n) = Ω(n)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">log(n) <= c \\cdot n</script> should use O</li>\n</ul>\n</blockquote>\n</li>\n<li>d. <script type=\"math/tex\">n^2 = \\Omega(n \\cdot log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. <script type=\"math/tex\">n^2 >= c \\cdot n \\cdot log(n)</script></li>\n</ul>\n</blockquote>\n</li>\n<li>e. <script type=\"math/tex\">n^2 \\cdot log(n) = \\Theta(n^2)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">n^2 \\cdot log(n) >= n^2</script> should use <script type=\"math/tex\">\\Omega</script></li>\n</ul>\n</blockquote>\n</li>\n<li>f. <script type=\"math/tex\">7 \\cdot (log(n))^2 + 2n \\cdot log(n) = Ω(log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. let <script type=\"math/tex\">A = log(n)</script>, so we have <script type=\"math/tex\">7A^2 + 2 \\cdot n \\cdot A >= A</script></li>\n</ul>\n</blockquote>\n</li>\n<li>g. <script type=\"math/tex\">5n \\cdot log(n) + 1024 n \\cdot log(log(n)) = Θ(n \\cdot log(n))</script><blockquote>\n<ul>\n<li><strong>True</strong>. let <script type=\"math/tex\">A = log(n)</script>,<br> so we have <script type=\"math/tex\">5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) = \\Theta(n \\cdot A)</script>. not easy to compare. but we already knew log(n) &lt; n. <br> So <script type=\"math/tex\">5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot log(A) < 5 \\cdot n \\cdot A + 1024 \\cdot n \\cdot A</script>. <br> let <script type=\"math/tex\">B = n \\cdot log(n)</script>, we will have <script type=\"math/tex\">5 \\cdot B + 1024 \\cdot B = 1029B \\, v.s. \\Theta(B)</script>. <br>f(n) = 1029B, g(n) = B. There exist many <script type=\"math/tex\">{c_1} \\, {c_2}</script> could meet <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>.</li>\n</ul>\n</blockquote>\n</li>\n<li>h. <script type=\"math/tex\">2^n + 100 \\cdot n^2 + n^{100}= O(n^{101})</script><blockquote>\n<ul>\n<li><strong>False</strong>. u can see the head img. <script type=\"math/tex\">2^n</script> grow faster than <script type=\"math/tex\">n^{100}</script>. so left part bigger than right. <br>The statement is wrong, and should use <script type=\"math/tex\">\\Omega</script></li>\n</ul>\n</blockquote>\n</li>\n<li>i. <script type=\"math/tex\">(1/3)^n + 100 = O(1)</script><blockquote>\n<ul>\n<li><strong>False</strong>. <script type=\"math/tex\">(1/3)^n</script> will going to zero when n &gt; 0. the left part will never beat the 101. so LHS is smaller or bigger than RHS when choose different <em>c</em>. Thus the statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><strong>(T/F)</strong> Any function which is <script type=\"math/tex\">Ω(log(n))</script> is also <script type=\"math/tex\">Ω(log(log(n)))</script>.<blockquote>\n<ul>\n<li><strong>True</strong>. Assume there is a f(n) &gt;= c <em> log(n).<br><br>and we also knew, log(n) &gt; log(log(n)) in any suitation. so we have f(n) &gt;= c </em> log(n) &gt; c * log(log(n)). </li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Θ(g(n)) then g(n) = Θ(f(n))<blockquote>\n<ul>\n<li><strong>True</strong>. becasue f(n) = Θ(g(n)), we have <script type=\"math/tex\">c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)</script>. LHS multiplt <script type=\"math/tex\">1 / c_1</script> =&gt; <script type=\"math/tex\">g(n) <= \\frac{1}{c_1}f(n)</script>. RHS multiplt <script type=\"math/tex\">1 / c_2</script> =&gt; <script type=\"math/tex\">\\frac{1}{c_2}f(n) <= g(n)</script>. <br>In all, we have <script type=\"math/tex\">\\frac{1}{c_2}f(n) <= g(n) <= \\frac{1}{c_1}f(n) \\,</script> =&gt; <script type=\"math/tex\">\\, b_1f(n) <= g(n) <= b_2f(n)</script></li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Θ(g(n)) then f(n) = Ω(g(n)).<blockquote>\n<ul>\n<li><strong>True</strong>. becasue f(n) = Θ(g(n)), we have <script type=\"math/tex\">c_1 \\cdot g(n) <= f(n) <= c_2 \\cdot g(n)</script>. LHS is what you need. so this is true.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> If f(n) = Ω(g(n)) then <script type=\"math/tex\">2^{f(n)} = Ω(2^{g(n)})</script>.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"><blockquote>\n<ul>\n<li><strong>False</strong> prove it by contradiction. <br><br>e.g. f(n) = 2n, g(n) = 4n. when c = 0.25. f(n) &gt;= c * g(n). <br><br>but <script type=\"math/tex\">2^{f(n)} = 4^n, 2^{g(n)} = 16^n</script>, <script type=\"math/tex\">2^{f(n)} <= 2^{g(n)}</script>. so this statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> BFS can be used to find the shortest path between any two nodes in a non-weighted graph.<blockquote>\n<ul>\n<li><strong>True</strong>. as the professor said. BFS find node in level order.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> A DFS tree is never the same as a BFS tree.<blockquote>\n<ul>\n<li><strong>False</strong>. could be the same.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Algorithm A has a running time of <script type=\"math/tex\">O(n^2)</script> and algorithm B has a running time of <script type=\"math/tex\">O(n \\cdot log(n)).</script> From this we conclude that A can never run faster than B on the same input.<blockquote>\n<ul>\n<li><strong>False</strong>. Big O annotation is just telling you the maximum time that your algorithm will cost. But when running in real life, the actual data could be easily handled. </li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Planar graph is a sparse graph.<blockquote>\n<ul>\n<li><strong>False</strong>. could be a dense graph.</li>\n</ul>\n</blockquote>\n</li>\n<li><strong>(T/F)</strong> Every DAG contains a vertex with no incoming edges.<blockquote>\n<ul>\n<li><strong>True</strong>. DAG (directed acyclic graph) cannot has a circle.</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Exercise-Q-amp-A\"><a href=\"#Exercise-Q-amp-A\" class=\"headerlink\" title=\"Exercise Q&amp;A\"></a>Exercise Q&amp;A</h3><ol>\n<li><p>Prove g(n) = Ω(f(n)) if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> To prove a theorem of the form <em>A IF AND ONLY IF B</em>, you first prove <em>IF A THEN B</em>, then you prove <em>IF B THEN A</em>, and that’s enough to complete the proof. <blockquote>\n<p><strong>Proof</strong></p>\n<ul>\n<li>$A \\rightrightarrows B$<blockquote>\n<p>g(n) = Ω(f(n)), means g(n) &gt;=  c * f(n), c &gt; 0 <br><br>we multiply 1 / c on both side, and we have <script type=\"math/tex\">\\frac{1}{c} \\cdot g((n)</script> &gt;= f(n) which equals to <br>  f(n) &lt;= <script type=\"math/tex\">{b} \\cdot g((n)</script>, <em>b</em> &gt; 0 , so we can say f(n) = O(g(n)).</p>\n</blockquote>\n</li>\n<li>$B \\leftleftarrows A$<blockquote>\n<p>f(n) = O(g(n)), means f(n) &lt;= c * g(n), c &gt; 0 <br><br>we multiply 1 / c on both side, and we have <script type=\"math/tex\">\\frac{1}{c} \\cdot f((n)</script> &lt;= g(n) which equals to <br>  g(n) &gt;= <script type=\"math/tex\">{b} \\cdot f((n)</script>, <em>b</em> &gt; 0 , so we can say g(n) = Ω(f(n)).</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove or disprove f(n) = O(g(n)) implies <script type=\"math/tex\">2^{f(n)} = O(2^{g(n)})</script>.<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> prove it by contradiction. <br><br>e.g. f(n) = 2n, g(n) = n. when c = 4. f(n) &lt;= c * g(n).<br><br>but <script type=\"math/tex\">2^{f(n)} = 4^n, 2^{g(n)} = 2^n</script>, <script type=\"math/tex\">2^{f(n)} >= 2^{g(n)}</script>. so this statement is wrong.</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Arrange the following functions<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<script type=\"math/tex; mode=display\">log(n^n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, 2^{log(n)},\\, (log(n))^2,\\, n^{\\sqrt{2}}</script><p>in increasing order of growth rate, with g(n) following f(n) in your list if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> we can follow this order<br>$O(1) &lt;= O(log(n)) &lt;= O((log(n))^C) &lt;= O(C^{log(n)}) &lt;= O(n) &lt;= O(n \\cdot log(n)) &lt;= O(n^C) &lt;= O((log(n))!) &lt;= O(n^{log(n)}) &lt;= O(C^n)$<br>And we can simply some of them in first place.<br><script type=\"math/tex\">① \\, log(n^n) = n \\cdot log(n) \\, ⑤ \\, 2^{log_2 n} = log_2 2^n = n \\cdot 1 = n</script>,<br>So , finally, we have <br><br>$nlog(n),\\, n^2,\\, n^{log(n)},\\, nlog(log(n)),\\, n,\\, (log(n))^2,\\, n^{\\sqrt{2}}$ <br><br>$O(1) \\Rightarrow None$<br>$O(log(n)) \\Rightarrow None$<br>$O((log(n))^C) \\Rightarrow ⑥$<br>$O(C^{log(n)}) \\Rightarrow None$<br>$O(n) \\Rightarrow ⑤$<br>$O(n \\cdot log(n)) \\Rightarrow ①④ since \\, n &gt; log(n) \\Rightarrow ④①$<br>$O(n^C) \\Rightarrow ②⑦ since \\, \\sqrt(2) &lt; 2 \\, and \\, log(n)\\, grow \\,slower \\,than \\,exponential \\,func $<br>$\\quad especially \\,when \\,a &gt; 1 \\, so, ⑦②$<br>$O((log(n))!) \\Rightarrow None$<br>$O(n^{log(n)}) \\Rightarrow ③$<br>$O(C^n) \\Rightarrow None$<br><br>the answers is: ⑥&lt;⑤&lt;④&lt;①&lt;⑦&lt;②&lt;③<br>$(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Arrange the following functions</p>\n<script type=\"math/tex; mode=display\">4^{log(n)},\\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, n^{1/log(n)},\\, (log(n))!</script><p>in increasing order of growth rate with g(n) following f(n) in your list if and only if f(n) = O(g(n)).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> we can follow this order<br>$O(1) &lt;= O(log(n)) &lt;= O((log(n))^C) &lt;= O(C^{log(n)}) &lt;= O(n) &lt;= O(n \\cdot log(n)) &lt;= O(n^C) &lt;= O((log(n))!) &lt;= O(n^{log(n)}) &lt;= O(C^n)$<br>And we can simply some of them in first place.<br><script type=\"math/tex\">① \\, 4^{log_2 n} = (2^2)^{log(n)} = 2^{2*log(n)} = 2^{log(n^2)} = log_2 2^{n^2} = n^2</script>,<br><br><script type=\"math/tex\">⑥ \\, n^{1/log(n)} = n^{log_2 2/log_2 n} = n^{log_n 2} = 2</script>,<br>So , finally, we have <br><br>$n^2, \\, \\sqrt{log(n)},\\, n^{log(log(n))},\\, (\\sqrt{2})^{log(n)},\\, 2^{\\sqrt{2log(n)}},\\, 2, \\, (log(n))!$ <br><br>$O(1) \\Rightarrow ⑥$<br>$O(log(n)) \\Rightarrow None$<br>$O((log(n))^C) \\Rightarrow ②$<br>$O(C^{log(n)}) \\Rightarrow ④⑤ \\quad (\\sqrt{2})^{log(n)} = 2^{log(n) / 2} $<br>$\\quad \\,we \\, can \\, just \\, compare \\, log(n) / 2 \\, v.s. \\sqrt{2 \\cdot log(n)} \\, so, ⑤④$<br>$O(n) \\Rightarrow None$<br>$O(n \\cdot log(n)) \\Rightarrow None$<br>$O(n^C) \\Rightarrow ①$<br>$O((log(n))!) \\Rightarrow ⑦$<br>$O(n^{log(n)}) \\Rightarrow ③$<br>$O(C^n) \\Rightarrow None$ <br><br>the answers is: ⑥&lt;②&lt;⑤&lt;④&lt;①&lt;⑦&lt;③<br>$(log(n))^2,\\, 2^{log(n)},\\, nlog(log(n)),\\, log(n^n),\\, n^{\\sqrt{2}}, \\, n^2,\\, n^{log(n)}$</li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bigOh1 (int n):</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"attribute\">i</span>=1 <span class=\"keyword\">to</span> n</span><br><span class=\"line\">    <span class=\"attribute\">j</span>=1;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> j &lt; n</span><br><span class=\"line\">      j = j<span class=\"number\">*2</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> <script type=\"math/tex\">O(n \\cdot log(n))</script><br><img src=\"ans_5.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-O runtime complexity of the following function?<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> bigOh3 (<span class=\"built_in\">int</span> n):</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">  <span class=\"built_in\">string</span> str = bigOh3(n<span class=\"number\">-1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str + str;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong> <script type=\"math/tex\">O(n \\cdot 2^n)</script><br><img src=\"ans_6.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the Big-Theta runtime complexity of the following function? Here <em>find_max</em> finds the maximum element in the array L[0], L[1], …, L[n - 1].<img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bigOh2 (<span class=\"built_in\">int</span>[] L, <span class=\"built_in\">int</span> <span class=\"built_in\">n</span>)<span class=\"symbol\">:</span></span><br><span class=\"line\">  while (<span class=\"built_in\">n</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    find_max(L, <span class=\"built_in\">n</span>);</span><br><span class=\"line\">    <span class=\"built_in\">n</span> = <span class=\"built_in\">n</span>/<span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><strong>Solution</strong><br><img src=\"ans_7.png\"  style=\"display:inline;box-shadow: none !important;\"></li>\n</ul>\n</blockquote>\n</li>\n<li><p>The complete graph on n vertices, denoted <script type=\"math/tex\">K_n</script>, is a simple graph in which there is an edge between every pair of distinct vertices. What is the height of the DFS tree for the complete graph <script type=\"math/tex\">K_n</script>? What is the height of the BFS tree for the complete graph <script type=\"math/tex\">K_n</script>?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We are interested in finding a simple path in a directed acyclic graph that visits all vertices once and only once. Design a linear time algorithm to determine if there is such a path in a given DAG.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove that a complete graph <script type=\"math/tex\">K_5</script> is not a planar graph.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Prove that a complete bipartite graph <script type=\"math/tex\">K_{3,3}</script> is not a planar graph.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>In a connected bipartite graph, is the bipartition unique? Justify your answer.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Given a directed graph G = (V, E) and a particular node v ∈ V, design a linear time algorithm to determine whether v is in a triangle of edges (a cycle of length 3).</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Design a linear time algorithm which, given an undirected graph G = (V, E) and a particular edge e ∈ E, determines whether G has a cycle containing e.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Given an undirected graph G = (V, E), prove that S is an independent set if and only if V - S is a vertex cover</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n"},{"title":"$$[Algorithms \\, In \\, Action]-CH2\\,Amortized Analysis$$","catalog":true,"mathjax":true,"date":"2021-01-24T19:09:23.000Z","subtitle":null,"header-img":"cruves.png","_content":"\nFor any monotonic functions, *f*, *g* from the positive integers to the positive integers, we say **f(n) = O(g(n))** or **f(n) = Ω(g(n))** or **f(n) = Θ(g(n))**\n\n### Concepts\n  - **T(n)** counts the \\# of steps, where *n* is the input size.\n  - **O** big O, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\leqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Ω** big Omega, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\geqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Θ** big Theta, $$\\exists \\, {c_1} \\, and \\, {c_2} $$ which $${c_1}$$ > 0 and $${c_2}$$ > 0 and real number $${n_0}$$, has $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n\n\n### Review Q&A\n1. What is the definition of the amortized cost using the aggregate method? <img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n\t> - **Solution**\n\n2. (T/F) Amortized analysis is used to determine the average runtime complexity of an algorithm.\n\t> - **True**\n\n3. (T/F) Compared to the worst-case analysis, amortized analysis provides a more accurate upper bound on the performance of an algorithm.\n\t> - **True**\n\n4. (T/F) The total amortized cost of a sequence of n operations gives a lower bound on the total actual cost of the sequence.\n\t> - **True**\n\n5. (T/F) Amortized constant time for a dynamic array is still guaranteed if we increase the array size by 5%.\n\t> - **True**\n\n6. (T/F) If an operation takes O(1) expected time, then it takes O(1) amortized time.\n\t> - **True**\n\n7. Suppose you have a data structure such that a sequence of n operations has an amortized cost of O(n * log n). What could be the highest actual time of a single operation?\n\t> - **Solution**\n\n8. What is the worst-case runtime complexity of searching in an amortized dictionary?\n\t> - **Solution**\n\n### Exercise Q&A\n1. You have a stack data type, and you need to implement a FIFO queue. The stack has the usual POP and PUSH operations, and the cost of each operation is 1. The FIFO has two operations: ENQUEUE and DEQUEUE. We can implement a FIFO queue using two stacks. What is the amortized cost of ENQUEUE and DEQUEUE operations?\n\t> - **Solution**\n\n2. We are incrementing a binary counter, where flipping the i-th bit costs i + 1. Flipping the lowest-order bit costs 0 + 1 = 1, the next bit costs 1 + 1 = 2, the next bit costs 2 + 1 = 3, and so on. What is the amortized cost per operation for a sequence of n increments, starting from zero?\n\t> - **Solution**\n\n3. We have argued in the lecture that if the table size is doubled when it’s full, then the amortized cost per insert is acceptable. Fred Hacker claims that this consumes too much space. He wants to try to increase the size with every insert by just two over the previous size. What is the amortized cost per insertion in Fred’s table?\n\t> - **Solution**\n\n4. This table supports inserts as well as deletions. The protocol is the following: If an array is full, we double its size on insertion; if an array is 1/4 full, we halve the array size on deletion. Show that the amortized cost of insert and delete is 5.\n\t> - **Solution**\n\n5. Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 2 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.\n\t> - **Solution**\n\n6. Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 4 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.\n\t> - **Solution**\n\n7. A MultiStack data structure has the usual POP and PUSH operations, and the cost of each operation is one unit. Additionally, it has MULTIPOP(k) operation that removes k recently pushed items. If k is bigger than the stack size, it removes all items. We wish to analyze the running time for a sequence of n PUSH, POP, and MULTIPOP operations, starting with an empty stack. What is the worst-case complexity for a sequence of n operations? What is the amortized cost per operation? Use the accounting method.\n\t> - **Solution**\n\n8. Consider a singly linked list as a dictionary that we always insert at the beginning of the list. Now assume that you may perform any number of insert operations but will only ever perform at most one lookup operation. What is the amortized cost per operation?\n\t> - **Solution**\n\t","source":"_posts/AIA-ch2-Q-A.md","raw":"---\ntitle: $$[Algorithms \\, In \\, Action]-CH2\\,Amortized Analysis$$\ncatalog: true\nmathjax: true\ndate: 2021-01-24 11:09:23\nsubtitle:\nheader-img: cruves.png\ntags:\n- Review\n- Amortized Analysis\n- Q&A\ncategories:\n- CSCI 570\n---\n\nFor any monotonic functions, *f*, *g* from the positive integers to the positive integers, we say **f(n) = O(g(n))** or **f(n) = Ω(g(n))** or **f(n) = Θ(g(n))**\n\n### Concepts\n  - **T(n)** counts the \\# of steps, where *n* is the input size.\n  - **O** big O, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\leqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Ω** big Omega, $$\\exists \\, c $$ which *c* > 0 and real number $${n_0}$$, has $$f(n) \t\\geqslant c \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n  - **Θ** big Theta, $$\\exists \\, {c_1} \\, and \\, {c_2} $$ which $${c_1}$$ > 0 and $${c_2}$$ > 0 and real number $${n_0}$$, has $${c_1} \\cdot g(n) \\leqslant f(n)\t\\leqslant {c_2} \\cdot g(n)$$, for all  $$n \\geqslant {n_0}$$.\n\n\n### Review Q&A\n1. What is the definition of the amortized cost using the aggregate method? <img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\">\n\t> - **Solution**\n\n2. (T/F) Amortized analysis is used to determine the average runtime complexity of an algorithm.\n\t> - **True**\n\n3. (T/F) Compared to the worst-case analysis, amortized analysis provides a more accurate upper bound on the performance of an algorithm.\n\t> - **True**\n\n4. (T/F) The total amortized cost of a sequence of n operations gives a lower bound on the total actual cost of the sequence.\n\t> - **True**\n\n5. (T/F) Amortized constant time for a dynamic array is still guaranteed if we increase the array size by 5%.\n\t> - **True**\n\n6. (T/F) If an operation takes O(1) expected time, then it takes O(1) amortized time.\n\t> - **True**\n\n7. Suppose you have a data structure such that a sequence of n operations has an amortized cost of O(n * log n). What could be the highest actual time of a single operation?\n\t> - **Solution**\n\n8. What is the worst-case runtime complexity of searching in an amortized dictionary?\n\t> - **Solution**\n\n### Exercise Q&A\n1. You have a stack data type, and you need to implement a FIFO queue. The stack has the usual POP and PUSH operations, and the cost of each operation is 1. The FIFO has two operations: ENQUEUE and DEQUEUE. We can implement a FIFO queue using two stacks. What is the amortized cost of ENQUEUE and DEQUEUE operations?\n\t> - **Solution**\n\n2. We are incrementing a binary counter, where flipping the i-th bit costs i + 1. Flipping the lowest-order bit costs 0 + 1 = 1, the next bit costs 1 + 1 = 2, the next bit costs 2 + 1 = 3, and so on. What is the amortized cost per operation for a sequence of n increments, starting from zero?\n\t> - **Solution**\n\n3. We have argued in the lecture that if the table size is doubled when it’s full, then the amortized cost per insert is acceptable. Fred Hacker claims that this consumes too much space. He wants to try to increase the size with every insert by just two over the previous size. What is the amortized cost per insertion in Fred’s table?\n\t> - **Solution**\n\n4. This table supports inserts as well as deletions. The protocol is the following: If an array is full, we double its size on insertion; if an array is 1/4 full, we halve the array size on deletion. Show that the amortized cost of insert and delete is 5.\n\t> - **Solution**\n\n5. Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 2 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.\n\t> - **Solution**\n\n6. Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 4 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.\n\t> - **Solution**\n\n7. A MultiStack data structure has the usual POP and PUSH operations, and the cost of each operation is one unit. Additionally, it has MULTIPOP(k) operation that removes k recently pushed items. If k is bigger than the stack size, it removes all items. We wish to analyze the running time for a sequence of n PUSH, POP, and MULTIPOP operations, starting with an empty stack. What is the worst-case complexity for a sequence of n operations? What is the amortized cost per operation? Use the accounting method.\n\t> - **Solution**\n\n8. Consider a singly linked list as a dictionary that we always insert at the beginning of the list. Now assume that you may perform any number of insert operations but will only ever perform at most one lookup operation. What is the amortized cost per operation?\n\t> - **Solution**\n\t","slug":"AIA-ch2-Q-A","published":1,"updated":"2021-01-24T19:25:05.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkc42t1w0002mgtt2cdf9che","content":"<p>For any monotonic functions, <em>f</em>, <em>g</em> from the positive integers to the positive integers, we say <strong>f(n) = O(g(n))</strong> or <strong>f(n) = Ω(g(n))</strong> or <strong>f(n) = Θ(g(n))</strong></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><ul>\n<li><strong>T(n)</strong> counts the # of steps, where <em>n</em> is the input size.</li>\n<li><strong>O</strong> big O, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Ω</strong> big Omega, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\geqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Θ</strong> big Theta, <script type=\"math/tex\">\\exists \\, {c_1} \\, and \\, {c_2}</script> which <script type=\"math/tex\">{c_1}</script> &gt; 0 and <script type=\"math/tex\">{c_2}</script> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n</ul>\n<h3 id=\"Review-Q-amp-A\"><a href=\"#Review-Q-amp-A\" class=\"headerlink\" title=\"Review Q&amp;A\"></a>Review Q&amp;A</h3><ol>\n<li><p>What is the definition of the amortized cost using the aggregate method? <img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Amortized analysis is used to determine the average runtime complexity of an algorithm.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Compared to the worst-case analysis, amortized analysis provides a more accurate upper bound on the performance of an algorithm.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) The total amortized cost of a sequence of n operations gives a lower bound on the total actual cost of the sequence.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Amortized constant time for a dynamic array is still guaranteed if we increase the array size by 5%.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) If an operation takes O(1) expected time, then it takes O(1) amortized time.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose you have a data structure such that a sequence of n operations has an amortized cost of O(n * log n). What could be the highest actual time of a single operation?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the worst-case runtime complexity of searching in an amortized dictionary?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Exercise-Q-amp-A\"><a href=\"#Exercise-Q-amp-A\" class=\"headerlink\" title=\"Exercise Q&amp;A\"></a>Exercise Q&amp;A</h3><ol>\n<li><p>You have a stack data type, and you need to implement a FIFO queue. The stack has the usual POP and PUSH operations, and the cost of each operation is 1. The FIFO has two operations: ENQUEUE and DEQUEUE. We can implement a FIFO queue using two stacks. What is the amortized cost of ENQUEUE and DEQUEUE operations?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We are incrementing a binary counter, where flipping the i-th bit costs i + 1. Flipping the lowest-order bit costs 0 + 1 = 1, the next bit costs 1 + 1 = 2, the next bit costs 2 + 1 = 3, and so on. What is the amortized cost per operation for a sequence of n increments, starting from zero?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We have argued in the lecture that if the table size is doubled when it’s full, then the amortized cost per insert is acceptable. Fred Hacker claims that this consumes too much space. He wants to try to increase the size with every insert by just two over the previous size. What is the amortized cost per insertion in Fred’s table?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>This table supports inserts as well as deletions. The protocol is the following: If an array is full, we double its size on insertion; if an array is 1/4 full, we halve the array size on deletion. Show that the amortized cost of insert and delete is 5.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 2 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 4 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>A MultiStack data structure has the usual POP and PUSH operations, and the cost of each operation is one unit. Additionally, it has MULTIPOP(k) operation that removes k recently pushed items. If k is bigger than the stack size, it removes all items. We wish to analyze the running time for a sequence of n PUSH, POP, and MULTIPOP operations, starting with an empty stack. What is the worst-case complexity for a sequence of n operations? What is the amortized cost per operation? Use the accounting method.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Consider a singly linked list as a dictionary that we always insert at the beginning of the list. Now assume that you may perform any number of insert operations but will only ever perform at most one lookup operation. What is the amortized cost per operation?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>For any monotonic functions, <em>f</em>, <em>g</em> from the positive integers to the positive integers, we say <strong>f(n) = O(g(n))</strong> or <strong>f(n) = Ω(g(n))</strong> or <strong>f(n) = Θ(g(n))</strong></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><ul>\n<li><strong>T(n)</strong> counts the # of steps, where <em>n</em> is the input size.</li>\n<li><strong>O</strong> big O, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\leqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Ω</strong> big Omega, <script type=\"math/tex\">\\exists \\, c</script> which <em>c</em> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">f(n)     \\geqslant c \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n<li><strong>Θ</strong> big Theta, <script type=\"math/tex\">\\exists \\, {c_1} \\, and \\, {c_2}</script> which <script type=\"math/tex\">{c_1}</script> &gt; 0 and <script type=\"math/tex\">{c_2}</script> &gt; 0 and real number <script type=\"math/tex\">{n_0}</script>, has <script type=\"math/tex\">{c_1} \\cdot g(n) \\leqslant f(n)    \\leqslant {c_2} \\cdot g(n)</script>, for all  <script type=\"math/tex\">n \\geqslant {n_0}</script>.</li>\n</ul>\n<h3 id=\"Review-Q-amp-A\"><a href=\"#Review-Q-amp-A\" class=\"headerlink\" title=\"Review Q&amp;A\"></a>Review Q&amp;A</h3><ol>\n<li><p>What is the definition of the amortized cost using the aggregate method? <img src=\"lecture.png\"  style=\"width:30px;display:inline;box-shadow: none !important;\"></p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Amortized analysis is used to determine the average runtime complexity of an algorithm.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Compared to the worst-case analysis, amortized analysis provides a more accurate upper bound on the performance of an algorithm.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) The total amortized cost of a sequence of n operations gives a lower bound on the total actual cost of the sequence.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) Amortized constant time for a dynamic array is still guaranteed if we increase the array size by 5%.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>(T/F) If an operation takes O(1) expected time, then it takes O(1) amortized time.</p>\n<blockquote>\n<ul>\n<li><strong>True</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose you have a data structure such that a sequence of n operations has an amortized cost of O(n * log n). What could be the highest actual time of a single operation?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>What is the worst-case runtime complexity of searching in an amortized dictionary?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Exercise-Q-amp-A\"><a href=\"#Exercise-Q-amp-A\" class=\"headerlink\" title=\"Exercise Q&amp;A\"></a>Exercise Q&amp;A</h3><ol>\n<li><p>You have a stack data type, and you need to implement a FIFO queue. The stack has the usual POP and PUSH operations, and the cost of each operation is 1. The FIFO has two operations: ENQUEUE and DEQUEUE. We can implement a FIFO queue using two stacks. What is the amortized cost of ENQUEUE and DEQUEUE operations?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We are incrementing a binary counter, where flipping the i-th bit costs i + 1. Flipping the lowest-order bit costs 0 + 1 = 1, the next bit costs 1 + 1 = 2, the next bit costs 2 + 1 = 3, and so on. What is the amortized cost per operation for a sequence of n increments, starting from zero?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>We have argued in the lecture that if the table size is doubled when it’s full, then the amortized cost per insert is acceptable. Fred Hacker claims that this consumes too much space. He wants to try to increase the size with every insert by just two over the previous size. What is the amortized cost per insertion in Fred’s table?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>This table supports inserts as well as deletions. The protocol is the following: If an array is full, we double its size on insertion; if an array is 1/4 full, we halve the array size on deletion. Show that the amortized cost of insert and delete is 5.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 2 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Suppose we perform a sequence of n operations on a data structure in which the i-th operation costs i if i is an exact power of 4 and 1 otherwise. Use aggregate analysis to determine the amortized cost per operation.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>A MultiStack data structure has the usual POP and PUSH operations, and the cost of each operation is one unit. Additionally, it has MULTIPOP(k) operation that removes k recently pushed items. If k is bigger than the stack size, it removes all items. We wish to analyze the running time for a sequence of n PUSH, POP, and MULTIPOP operations, starting with an empty stack. What is the worst-case complexity for a sequence of n operations? What is the amortized cost per operation? Use the accounting method.</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n<li><p>Consider a singly linked list as a dictionary that we always insert at the beginning of the list. Now assume that you may perform any number of insert operations but will only ever perform at most one lookup operation. What is the amortized cost per operation?</p>\n<blockquote>\n<ul>\n<li><strong>Solution</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/AIA-ch1-Q-A/cruves.png","slug":"cruves.png","post":"ckkc42t1t0001mgtt2lgfdehe","modified":1,"renderable":0},{"_id":"source/_posts/AIA-ch1-Q-A/ans_7.png","slug":"ans_7.png","post":"ckkc42t1t0001mgtt2lgfdehe","modified":1,"renderable":0},{"_id":"source/_posts/AIA-ch1-Q-A/ans_6.png","slug":"ans_6.png","post":"ckkc42t1t0001mgtt2lgfdehe","modified":1,"renderable":0},{"_id":"source/_posts/AIA-ch1-Q-A/ans_5.png","post":"ckkc42t1t0001mgtt2lgfdehe","slug":"ans_5.png","modified":1,"renderable":1},{"_id":"source/_posts/AIA-ch1-Q-A/fn_gn.png","post":"ckkc42t1t0001mgtt2lgfdehe","slug":"fn_gn.png","modified":1,"renderable":1},{"_id":"source/_posts/AIA-ch1-Q-A/lecture.png","post":"ckkc42t1t0001mgtt2lgfdehe","slug":"lecture.png","modified":1,"renderable":1},{"_id":"source/_posts/AIA-ch2-Q-A/lecture.png","post":"ckkc42t1w0002mgtt2cdf9che","slug":"lecture.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckkc42t1t0001mgtt2lgfdehe","category_id":"ckkc42t1y0003mgtt4lpegilw","_id":"ckkc42t230007mgtt7vzoe6o6"},{"post_id":"ckkc42t1w0002mgtt2cdf9che","category_id":"ckkc42t1y0003mgtt4lpegilw","_id":"ckkc42t260009mgtthqhd6x4w"}],"PostTag":[{"post_id":"ckkc42t1t0001mgtt2lgfdehe","tag_id":"ckkc42t1z0004mgtt34qib950","_id":"ckkc42t27000bmgtt7hl24hk9"},{"post_id":"ckkc42t1t0001mgtt2lgfdehe","tag_id":"ckkc42t200006mgtt20z2h6v7","_id":"ckkc42t27000cmgtt3kl35bwf"},{"post_id":"ckkc42t1t0001mgtt2lgfdehe","tag_id":"ckkc42t230008mgtt2mec3q7w","_id":"ckkc42t28000emgtt2t2fb8oj"},{"post_id":"ckkc42t1w0002mgtt2cdf9che","tag_id":"ckkc42t1z0004mgtt34qib950","_id":"ckkc42t28000gmgttf98g2212"},{"post_id":"ckkc42t1w0002mgtt2cdf9che","tag_id":"ckkc42t27000dmgtt8kmk83jd","_id":"ckkc42t28000hmgttczby5dze"},{"post_id":"ckkc42t1w0002mgtt2cdf9che","tag_id":"ckkc42t230008mgtt2mec3q7w","_id":"ckkc42t29000imgttal1ka6px"}],"Tag":[{"name":"Review","_id":"ckkc42t1z0004mgtt34qib950"},{"name":"Graph","_id":"ckkc42t200006mgtt20z2h6v7"},{"name":"Q&A","_id":"ckkc42t230008mgtt2mec3q7w"},{"name":"Amortized Analysis","_id":"ckkc42t27000dmgtt8kmk83jd"}]}}